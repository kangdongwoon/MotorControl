
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  0000140c  000014a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000140c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000016f  0080012a  0080012a  000014ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014b7  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aad  00000000  00000000  00002af7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa6  00000000  00000000  000035a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  0000404c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a00  00000000  00000000  0000438c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006bb  00000000  00000000  00004d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00005447  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c0       	rjmp	.+350    	; 0x1a0 <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	8c c0       	rjmp	.+280    	; 0x162 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e0       	ldi	r30, 0x0C	; 12
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 32       	cpi	r26, 0x2A	; 42
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	aa e2       	ldi	r26, 0x2A	; 42
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a9 39       	cpi	r26, 0x99	; 153
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	ca d5       	rcall	.+2964   	; 0xc58 <main>
      c4:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <SetDutyCW>:



void SetDutyCW(double v){
	
	while(TCNT1  == 0);
      ca:	2c b5       	in	r18, 0x2c	; 44
      cc:	3d b5       	in	r19, 0x2d	; 45
      ce:	23 2b       	or	r18, r19
      d0:	e1 f3       	breq	.-8      	; 0xca <SetDutyCW>

	int ocr = v * (200. / 24.) + 200;
      d2:	25 e5       	ldi	r18, 0x55	; 85
      d4:	35 e5       	ldi	r19, 0x55	; 85
      d6:	45 e0       	ldi	r20, 0x05	; 5
      d8:	51 e4       	ldi	r21, 0x41	; 65
      da:	0e 94 a1 09 	call	0x1342	; 0x1342 <__mulsf3>
      de:	20 e0       	ldi	r18, 0x00	; 0
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	48 e4       	ldi	r20, 0x48	; 72
      e4:	53 e4       	ldi	r21, 0x43	; 67
      e6:	76 d7       	rcall	.+3820   	; 0xfd4 <__addsf3>
      e8:	0e 94 ba 08 	call	0x1174	; 0x1174 <__fixsfsi>
	
	if(ocr > OCR_MAX)	ocr = OCR_MAX;
      ec:	67 38       	cpi	r22, 0x87	; 135
      ee:	81 e0       	ldi	r24, 0x01	; 1
      f0:	78 07       	cpc	r23, r24
      f2:	34 f4       	brge	.+12     	; 0x100 <SetDutyCW+0x36>
	else if(ocr < OCR_MIN)	ocr = OCR_MIN;
      f4:	6a 30       	cpi	r22, 0x0A	; 10
      f6:	71 05       	cpc	r23, r1
      f8:	2c f4       	brge	.+10     	; 0x104 <SetDutyCW+0x3a>
      fa:	6a e0       	ldi	r22, 0x0A	; 10
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	02 c0       	rjmp	.+4      	; 0x104 <SetDutyCW+0x3a>
	
	while(TCNT1  == 0);

	int ocr = v * (200. / 24.) + 200;
	
	if(ocr > OCR_MAX)	ocr = OCR_MAX;
     100:	66 e8       	ldi	r22, 0x86	; 134
     102:	71 e0       	ldi	r23, 0x01	; 1
	else if(ocr < OCR_MIN)	ocr = OCR_MIN;
	//OCR1A = OCR1B = ocr;
	
	OCR1A = OCR3B = ocr + 8;		//1 H
     104:	cb 01       	movw	r24, r22
     106:	08 96       	adiw	r24, 0x08	; 8
     108:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     10c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     110:	9b bd       	out	0x2b, r25	; 43
     112:	8a bd       	out	0x2a, r24	; 42
	OCR1B = OCR3A = ocr - 8;		//1 L
     114:	68 50       	subi	r22, 0x08	; 8
     116:	71 09       	sbc	r23, r1
     118:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     11c:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     120:	79 bd       	out	0x29, r23	; 41
     122:	68 bd       	out	0x28, r22	; 40
     124:	08 95       	ret

00000126 <InitLS7366>:


}


void InitLS7366(){
     126:	cf 93       	push	r28
	
	PORTB = 0x00;
     128:	18 ba       	out	0x18, r1	; 24
	SPI_MasterSend(SELECT_MDR0 | WR_REG);
     12a:	88 e8       	ldi	r24, 0x88	; 136
     12c:	48 d7       	rcall	.+3728   	; 0xfbe <SPI_MasterSend>
	SPI_MasterSend(X4_QUAD | FREE_RUN | DISABLE_INDEX | SYNCHRONOUS_INDEX |FILTER_CDF_1);
     12e:	83 e4       	ldi	r24, 0x43	; 67
     130:	46 d7       	rcall	.+3724   	; 0xfbe <SPI_MasterSend>
	PORTB = 0x01;
     132:	c1 e0       	ldi	r28, 0x01	; 1
     134:	c8 bb       	out	0x18, r28	; 24
	
	PORTB = 0x00;
	SPI_MasterSend(SELECT_MDR1 | WR_REG);
     136:	18 ba       	out	0x18, r1	; 24
     138:	80 e9       	ldi	r24, 0x90	; 144
	SPI_MasterSend(FOUR_BYTE_COUNT_MODE | ENABLE_COUNTING);
     13a:	41 d7       	rcall	.+3714   	; 0xfbe <SPI_MasterSend>
     13c:	80 e0       	ldi	r24, 0x00	; 0
	PORTB = 0x01;
     13e:	3f d7       	rcall	.+3710   	; 0xfbe <SPI_MasterSend>
	
	PORTB = 0x00;
     140:	c8 bb       	out	0x18, r28	; 24
	SPI_MasterSend(SELECT_CNTR | CLR_REG);
     142:	18 ba       	out	0x18, r1	; 24
     144:	80 e2       	ldi	r24, 0x20	; 32
     146:	3b d7       	rcall	.+3702   	; 0xfbe <SPI_MasterSend>
	PORTB = 0x01;
     148:	c8 bb       	out	0x18, r28	; 24
}
     14a:	cf 91       	pop	r28
     14c:	08 95       	ret

0000014e <getADC>:



int getADC(char ch){

	ADMUX = (ADMUX & 0xf0) + ch;
     14e:	97 b1       	in	r25, 0x07	; 7
     150:	90 7f       	andi	r25, 0xF0	; 240
     152:	89 0f       	add	r24, r25
     154:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0x40;
     156:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & 0x10));
     158:	34 9b       	sbis	0x06, 4	; 6
     15a:	fe cf       	rjmp	.-4      	; 0x158 <getADC+0xa>
	return ADC;
     15c:	84 b1       	in	r24, 0x04	; 4
     15e:	95 b1       	in	r25, 0x05	; 5
}
     160:	08 95       	ret

00000162 <__vector_18>:




ISR(USART0_RX_vect){
     162:	1f 92       	push	r1
     164:	0f 92       	push	r0
     166:	0f b6       	in	r0, 0x3f	; 63
     168:	0f 92       	push	r0
     16a:	11 24       	eor	r1, r1
     16c:	0b b6       	in	r0, 0x3b	; 59
     16e:	0f 92       	push	r0
     170:	8f 93       	push	r24
     172:	ef 93       	push	r30
     174:	ff 93       	push	r31
	g_buf[g_BufWriteCnt++] =UDR0;
     176:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <g_BufWriteCnt>
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	8e 0f       	add	r24, r30
     17e:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <g_BufWriteCnt>
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	8c b1       	in	r24, 0x0c	; 12
     186:	e6 5c       	subi	r30, 0xC6	; 198
     188:	fe 4f       	sbci	r31, 0xFE	; 254
     18a:	80 83       	st	Z, r24
}
     18c:	ff 91       	pop	r31
     18e:	ef 91       	pop	r30
     190:	8f 91       	pop	r24
     192:	0f 90       	pop	r0
     194:	0b be       	out	0x3b, r0	; 59
     196:	0f 90       	pop	r0
     198:	0f be       	out	0x3f, r0	; 63
     19a:	0f 90       	pop	r0
     19c:	1f 90       	pop	r1
     19e:	18 95       	reti

000001a0 <__vector_16>:




//ISR(TIMER3_OVF_vect){
ISR(TIMER0_OVF_vect){ // 0.5ms Overflow timer
     1a0:	1f 92       	push	r1
     1a2:	0f 92       	push	r0
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	0f 92       	push	r0
     1a8:	11 24       	eor	r1, r1
     1aa:	0b b6       	in	r0, 0x3b	; 59
     1ac:	0f 92       	push	r0
     1ae:	4f 92       	push	r4
     1b0:	5f 92       	push	r5
     1b2:	6f 92       	push	r6
     1b4:	7f 92       	push	r7
     1b6:	8f 92       	push	r8
     1b8:	9f 92       	push	r9
     1ba:	af 92       	push	r10
     1bc:	bf 92       	push	r11
     1be:	cf 92       	push	r12
     1c0:	df 92       	push	r13
     1c2:	ef 92       	push	r14
     1c4:	ff 92       	push	r15
     1c6:	2f 93       	push	r18
     1c8:	3f 93       	push	r19
     1ca:	4f 93       	push	r20
     1cc:	5f 93       	push	r21
     1ce:	6f 93       	push	r22
     1d0:	7f 93       	push	r23
     1d2:	8f 93       	push	r24
     1d4:	9f 93       	push	r25
     1d6:	af 93       	push	r26
     1d8:	bf 93       	push	r27
     1da:	ef 93       	push	r30
     1dc:	ff 93       	push	r31
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	00 d0       	rcall	.+0      	; 0x1e4 <__vector_16+0x44>
     1e4:	00 d0       	rcall	.+0      	; 0x1e6 <__vector_16+0x46>
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
			
	TCNT0 = 256 - 125;
     1ea:	83 e8       	ldi	r24, 0x83	; 131
     1ec:	82 bf       	out	0x32, r24	; 50
			
	// Read LS7366 //
	
	int32_t cnt;
	
	PORTC = 0x01;
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	25 bb       	out	0x15, r18	; 21
	//g_ADC = getADC(0);
	PORTB = 0x00;
     1f2:	18 ba       	out	0x18, r1	; 24
	SPI_MasterSend(SELECT_OTR | LOAD_REG);
     1f4:	88 ee       	ldi	r24, 0xE8	; 232
     1f6:	e3 d6       	rcall	.+3526   	; 0xfbe <SPI_MasterSend>
	PORTB = 0x01;
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	88 bb       	out	0x18, r24	; 24
			
	PORTB = 0x00;
     1fc:	18 ba       	out	0x18, r1	; 24
	SPI_MasterSend(SELECT_OTR | RD_REG);
     1fe:	88 e6       	ldi	r24, 0x68	; 104
	cnt = SPI_MasterRecv();		cnt = cnt<< 8;
     200:	de d6       	rcall	.+3516   	; 0xfbe <SPI_MasterSend>
     202:	e2 d6       	rcall	.+3524   	; 0xfc8 <SPI_MasterRecv>
     204:	c8 2e       	mov	r12, r24
     206:	d1 2c       	mov	r13, r1
     208:	e1 2c       	mov	r14, r1
     20a:	f1 2c       	mov	r15, r1
     20c:	fe 2c       	mov	r15, r14
     20e:	ed 2c       	mov	r14, r13
     210:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();	cnt = cnt<< 8;
     212:	cc 24       	eor	r12, r12
     214:	d9 d6       	rcall	.+3506   	; 0xfc8 <SPI_MasterRecv>
     216:	c8 2a       	or	r12, r24
     218:	fe 2c       	mov	r15, r14
     21a:	ed 2c       	mov	r14, r13
     21c:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();	cnt = cnt<< 8;
     21e:	cc 24       	eor	r12, r12
     220:	d3 d6       	rcall	.+3494   	; 0xfc8 <SPI_MasterRecv>
     222:	c8 2a       	or	r12, r24
     224:	fe 2c       	mov	r15, r14
     226:	ed 2c       	mov	r14, r13
     228:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();
     22a:	cc 24       	eor	r12, r12
     22c:	cd d6       	rcall	.+3482   	; 0xfc8 <SPI_MasterRecv>
	PORTB = 0x01;
     22e:	91 e0       	ldi	r25, 0x01	; 1
     230:	98 bb       	out	0x18, r25	; 24
	g_Cnt = -cnt;
     232:	c8 2a       	or	r12, r24
     234:	f0 94       	com	r15
     236:	e0 94       	com	r14
     238:	d0 94       	com	r13
     23a:	c0 94       	com	r12
     23c:	c1 1c       	adc	r12, r1
     23e:	d1 1c       	adc	r13, r1
     240:	e1 1c       	adc	r14, r1
     242:	f1 1c       	adc	r15, r1
     244:	c0 92 87 02 	sts	0x0287, r12	; 0x800287 <g_Cnt>
     248:	d0 92 88 02 	sts	0x0288, r13	; 0x800288 <g_Cnt+0x1>
     24c:	e0 92 89 02 	sts	0x0289, r14	; 0x800289 <g_Cnt+0x2>
     250:	f0 92 8a 02 	sts	0x028A, r15	; 0x80028a <g_Cnt+0x3>
	
	PORTC = 0x03;
     254:	83 e0       	ldi	r24, 0x03	; 3
     256:	85 bb       	out	0x15, r24	; 21

	// Read Angle // 
	//=> g_Pcur : Radian으로 출력되는 것 확인 -> Degree :: g_Pcur / 2.0 / M_PI * 360.0
	g_Pcur = (g_Cnt / (4096. * 81.)) * 2 * M_PI ;
     258:	60 91 87 02 	lds	r22, 0x0287	; 0x800287 <g_Cnt>
     25c:	70 91 88 02 	lds	r23, 0x0288	; 0x800288 <g_Cnt+0x1>
     260:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <g_Cnt+0x2>
     264:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <g_Cnt+0x3>
     268:	b8 d7       	rcall	.+3952   	; 0x11da <__floatsisf>
     26a:	20 e0       	ldi	r18, 0x00	; 0
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	42 ea       	ldi	r20, 0xA2	; 162
     270:	58 e4       	ldi	r21, 0x48	; 72
     272:	18 d7       	rcall	.+3632   	; 0x10a4 <__divsf3>
     274:	9b 01       	movw	r18, r22
     276:	ac 01       	movw	r20, r24
     278:	ad d6       	rcall	.+3418   	; 0xfd4 <__addsf3>
     27a:	2b ed       	ldi	r18, 0xDB	; 219
     27c:	3f e0       	ldi	r19, 0x0F	; 15
     27e:	49 e4       	ldi	r20, 0x49	; 73
     280:	50 e4       	ldi	r21, 0x40	; 64
     282:	0e 94 a1 09 	call	0x1342	; 0x1342 <__mulsf3>
     286:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <g_Pcur>
     28a:	70 93 8d 02 	sts	0x028D, r23	; 0x80028d <g_Pcur+0x1>
     28e:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <g_Pcur+0x2>
     292:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <g_Pcur+0x3>
	if((g_TimerCnt % 10) == 0){
     296:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <g_TimerCnt>
     29a:	8d ec       	ldi	r24, 0xCD	; 205
     29c:	28 9f       	mul	r18, r24
     29e:	81 2d       	mov	r24, r1
     2a0:	11 24       	eor	r1, r1
     2a2:	86 95       	lsr	r24
     2a4:	86 95       	lsr	r24
     2a6:	86 95       	lsr	r24
     2a8:	88 0f       	add	r24, r24
     2aa:	98 2f       	mov	r25, r24
     2ac:	99 0f       	add	r25, r25
     2ae:	99 0f       	add	r25, r25
     2b0:	89 0f       	add	r24, r25
     2b2:	28 13       	cpse	r18, r24
     2b4:	40 c0       	rjmp	.+128    	; 0x336 <__vector_16+0x196>
		// Angular Velocity 
		g_Vcur = (g_Pcur - g_Pvcur) / (dt * 10.0);
     2b6:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <g_Pcur>
     2ba:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <g_Pcur+0x1>
     2be:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <g_Pcur+0x2>
     2c2:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <g_Pcur+0x3>
     2c6:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <g_Pvcur>
     2ca:	30 91 91 02 	lds	r19, 0x0291	; 0x800291 <g_Pvcur+0x1>
     2ce:	40 91 92 02 	lds	r20, 0x0292	; 0x800292 <g_Pvcur+0x2>
     2d2:	50 91 93 02 	lds	r21, 0x0293	; 0x800293 <g_Pvcur+0x3>
     2d6:	80 90 18 01 	lds	r8, 0x0118	; 0x800118 <dt>
     2da:	90 90 19 01 	lds	r9, 0x0119	; 0x800119 <dt+0x1>
     2de:	a0 90 1a 01 	lds	r10, 0x011A	; 0x80011a <dt+0x2>
     2e2:	b0 90 1b 01 	lds	r11, 0x011B	; 0x80011b <dt+0x3>
     2e6:	75 d6       	rcall	.+3306   	; 0xfd2 <__subsf3>
     2e8:	6b 01       	movw	r12, r22
     2ea:	7c 01       	movw	r14, r24
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 e2       	ldi	r20, 0x20	; 32
     2f2:	51 e4       	ldi	r21, 0x41	; 65
     2f4:	c5 01       	movw	r24, r10
     2f6:	b4 01       	movw	r22, r8
     2f8:	0e 94 a1 09 	call	0x1342	; 0x1342 <__mulsf3>
     2fc:	9b 01       	movw	r18, r22
     2fe:	ac 01       	movw	r20, r24
     300:	c7 01       	movw	r24, r14
     302:	b6 01       	movw	r22, r12
     304:	cf d6       	rcall	.+3486   	; 0x10a4 <__divsf3>
     306:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <g_Vcur>
     30a:	70 93 33 01 	sts	0x0133, r23	; 0x800133 <g_Vcur+0x1>
     30e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <g_Vcur+0x2>
     312:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <g_Vcur+0x3>
		g_Pvcur = g_Pcur;
     316:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <g_Pcur>
     31a:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <g_Pcur+0x1>
     31e:	a0 91 8e 02 	lds	r26, 0x028E	; 0x80028e <g_Pcur+0x2>
     322:	b0 91 8f 02 	lds	r27, 0x028F	; 0x80028f <g_Pcur+0x3>
     326:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <g_Pvcur>
     32a:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <g_Pvcur+0x1>
     32e:	a0 93 92 02 	sts	0x0292, r26	; 0x800292 <g_Pvcur+0x2>
	}
	///////////////
	
	// Read Current //
	g_ADC = getADC(0);
     332:	b0 93 93 02 	sts	0x0293, r27	; 0x800293 <g_Pvcur+0x3>
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	0a df       	rcall	.-492    	; 0x14e <getADC>
     33a:	bc 01       	movw	r22, r24
     33c:	99 0f       	add	r25, r25
     33e:	88 0b       	sbc	r24, r24
     340:	99 0b       	sbc	r25, r25
     342:	4b d7       	rcall	.+3734   	; 0x11da <__floatsisf>
     344:	60 93 7b 02 	sts	0x027B, r22	; 0x80027b <g_ADC>
     348:	70 93 7c 02 	sts	0x027C, r23	; 0x80027c <g_ADC+0x1>
     34c:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <g_ADC+0x2>
     350:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <g_ADC+0x3>
	g_Ccur = -( ((g_ADC / 1024. * 5.) - 2.488) * 10.);
     354:	60 91 7b 02 	lds	r22, 0x027B	; 0x80027b <g_ADC>
     358:	70 91 7c 02 	lds	r23, 0x027C	; 0x80027c <g_ADC+0x1>
     35c:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <g_ADC+0x2>
     360:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <g_ADC+0x3>
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	40 e8       	ldi	r20, 0x80	; 128
     36a:	5a e3       	ldi	r21, 0x3A	; 58
     36c:	ea d7       	rcall	.+4052   	; 0x1342 <__mulsf3>
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	40 ea       	ldi	r20, 0xA0	; 160
     374:	50 e4       	ldi	r21, 0x40	; 64
     376:	e5 d7       	rcall	.+4042   	; 0x1342 <__mulsf3>
     378:	24 e6       	ldi	r18, 0x64	; 100
     37a:	3b e3       	ldi	r19, 0x3B	; 59
     37c:	4f e1       	ldi	r20, 0x1F	; 31
     37e:	50 e4       	ldi	r21, 0x40	; 64
     380:	28 d6       	rcall	.+3152   	; 0xfd2 <__subsf3>
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	40 e2       	ldi	r20, 0x20	; 32
     388:	51 e4       	ldi	r21, 0x41	; 65
     38a:	db d7       	rcall	.+4022   	; 0x1342 <__mulsf3>
     38c:	dc 01       	movw	r26, r24
     38e:	cb 01       	movw	r24, r22
     390:	b0 58       	subi	r27, 0x80	; 128
     392:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <g_Ccur>
     396:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <g_Ccur+0x1>
     39a:	a0 93 4a 02 	sts	0x024A, r26	; 0x80024a <g_Ccur+0x2>
     39e:	b0 93 4b 02 	sts	0x024B, r27	; 0x80024b <g_Ccur+0x3>
		SetDutyCW(-12.);
	}*/

	// ** CONTROL ** //
	// Position Control
	if((g_TimerCnt % 100) == 0){
     3a2:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <g_TimerCnt>
     3a6:	89 e2       	ldi	r24, 0x29	; 41
     3a8:	98 9f       	mul	r25, r24
     3aa:	81 2d       	mov	r24, r1
     3ac:	11 24       	eor	r1, r1
     3ae:	82 95       	swap	r24
     3b0:	8f 70       	andi	r24, 0x0F	; 15
     3b2:	a4 e6       	ldi	r26, 0x64	; 100
     3b4:	8a 9f       	mul	r24, r26
     3b6:	90 19       	sub	r25, r0
     3b8:	11 24       	eor	r1, r1
     3ba:	91 11       	cpse	r25, r1
     3bc:	09 c1       	rjmp	.+530    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
/*		g_Pdes = 1.5;*/
		g_Perr = g_Pdes - g_Pcur;
     3be:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <g_Pdes>
     3c2:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <g_Pdes+0x1>
     3c6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_Pdes+0x2>
     3ca:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <g_Pdes+0x3>
     3ce:	20 91 8c 02 	lds	r18, 0x028C	; 0x80028c <g_Pcur>
     3d2:	30 91 8d 02 	lds	r19, 0x028D	; 0x80028d <g_Pcur+0x1>
     3d6:	40 91 8e 02 	lds	r20, 0x028E	; 0x80028e <g_Pcur+0x2>
     3da:	50 91 8f 02 	lds	r21, 0x028F	; 0x80028f <g_Pcur+0x3>
     3de:	f9 d5       	rcall	.+3058   	; 0xfd2 <__subsf3>
     3e0:	60 93 3a 02 	sts	0x023A, r22	; 0x80023a <g_Perr>
     3e4:	70 93 3b 02 	sts	0x023B, r23	; 0x80023b <g_Perr+0x1>
     3e8:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <g_Perr+0x2>
     3ec:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <g_Perr+0x3>
		g_pos_control = g_Perr * Kp_p + (g_Perr-g_Pverr) * Kd_p / (dt * 100);
     3f0:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <g_Perr>
     3f4:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <g_Perr+0x1>
     3f8:	a0 91 3c 02 	lds	r26, 0x023C	; 0x80023c <g_Perr+0x2>
     3fc:	b0 91 3d 02 	lds	r27, 0x023D	; 0x80023d <g_Perr+0x3>
     400:	89 83       	std	Y+1, r24	; 0x01
     402:	9a 83       	std	Y+2, r25	; 0x02
     404:	ab 83       	std	Y+3, r26	; 0x03
     406:	bc 83       	std	Y+4, r27	; 0x04
     408:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <Kp_p>
     40c:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <Kp_p+0x1>
     410:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <Kp_p+0x2>
     414:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <Kp_p+0x3>
     418:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <g_Perr>
     41c:	70 91 3b 02 	lds	r23, 0x023B	; 0x80023b <g_Perr+0x1>
     420:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <g_Perr+0x2>
     424:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <g_Perr+0x3>
     428:	20 91 54 02 	lds	r18, 0x0254	; 0x800254 <g_Pverr>
     42c:	30 91 55 02 	lds	r19, 0x0255	; 0x800255 <g_Pverr+0x1>
     430:	40 91 56 02 	lds	r20, 0x0256	; 0x800256 <g_Pverr+0x2>
     434:	50 91 57 02 	lds	r21, 0x0257	; 0x800257 <g_Pverr+0x3>
     438:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     43c:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     440:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     444:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     448:	40 90 18 01 	lds	r4, 0x0118	; 0x800118 <dt>
     44c:	50 90 19 01 	lds	r5, 0x0119	; 0x800119 <dt+0x1>
     450:	60 90 1a 01 	lds	r6, 0x011A	; 0x80011a <dt+0x2>
     454:	70 90 1b 01 	lds	r7, 0x011B	; 0x80011b <dt+0x3>
     458:	bc d5       	rcall	.+2936   	; 0xfd2 <__subsf3>
     45a:	a5 01       	movw	r20, r10
     45c:	94 01       	movw	r18, r8
     45e:	71 d7       	rcall	.+3810   	; 0x1342 <__mulsf3>
     460:	4b 01       	movw	r8, r22
     462:	5c 01       	movw	r10, r24
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	48 ec       	ldi	r20, 0xC8	; 200
     46a:	52 e4       	ldi	r21, 0x42	; 66
     46c:	c3 01       	movw	r24, r6
     46e:	b2 01       	movw	r22, r4
     470:	68 d7       	rcall	.+3792   	; 0x1342 <__mulsf3>
     472:	9b 01       	movw	r18, r22
     474:	ac 01       	movw	r20, r24
     476:	c5 01       	movw	r24, r10
     478:	b4 01       	movw	r22, r8
     47a:	14 d6       	rcall	.+3112   	; 0x10a4 <__divsf3>
     47c:	4b 01       	movw	r8, r22
     47e:	5c 01       	movw	r10, r24
     480:	a7 01       	movw	r20, r14
     482:	96 01       	movw	r18, r12
     484:	69 81       	ldd	r22, Y+1	; 0x01
     486:	7a 81       	ldd	r23, Y+2	; 0x02
     488:	8b 81       	ldd	r24, Y+3	; 0x03
     48a:	9c 81       	ldd	r25, Y+4	; 0x04
     48c:	5a d7       	rcall	.+3764   	; 0x1342 <__mulsf3>
     48e:	9b 01       	movw	r18, r22
     490:	ac 01       	movw	r20, r24
     492:	c5 01       	movw	r24, r10
     494:	b4 01       	movw	r22, r8
     496:	9e d5       	rcall	.+2876   	; 0xfd4 <__addsf3>
     498:	60 93 7f 02 	sts	0x027F, r22	; 0x80027f <g_pos_control>
     49c:	70 93 80 02 	sts	0x0280, r23	; 0x800280 <g_pos_control+0x1>
     4a0:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <g_pos_control+0x2>
     4a4:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <g_pos_control+0x3>
		g_Pverr = g_Perr; 
     4a8:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <g_Perr>
     4ac:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <g_Perr+0x1>
     4b0:	a0 91 3c 02 	lds	r26, 0x023C	; 0x80023c <g_Perr+0x2>
     4b4:	b0 91 3d 02 	lds	r27, 0x023D	; 0x80023d <g_Perr+0x3>
     4b8:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <g_Pverr>
     4bc:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <g_Pverr+0x1>
     4c0:	a0 93 56 02 	sts	0x0256, r26	; 0x800256 <g_Pverr+0x2>
     4c4:	b0 93 57 02 	sts	0x0257, r27	; 0x800257 <g_Pverr+0x3>
		// Norminal Angluar Velocity Saturation // 6410 RPM -> 642 rad/s
		// Load가 없을 때의 Saturation이기 때문에 의미는 없음
		if(g_pos_control > 642.){ 
     4c8:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <g_pos_control>
     4cc:	70 91 80 02 	lds	r23, 0x0280	; 0x800280 <g_pos_control+0x1>
     4d0:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <g_pos_control+0x2>
     4d4:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <g_pos_control+0x3>
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	30 e8       	ldi	r19, 0x80	; 128
     4dc:	40 e2       	ldi	r20, 0x20	; 32
     4de:	54 e4       	ldi	r21, 0x44	; 68
     4e0:	2c d7       	rcall	.+3672   	; 0x133a <__gesf2>
     4e2:	18 16       	cp	r1, r24
     4e4:	6c f4       	brge	.+26     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
			g_pos_control = 642.;
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e8       	ldi	r25, 0x80	; 128
     4ea:	a0 e2       	ldi	r26, 0x20	; 32
     4ec:	b4 e4       	ldi	r27, 0x44	; 68
     4ee:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <g_pos_control>
     4f2:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <g_pos_control+0x1>
     4f6:	a0 93 81 02 	sts	0x0281, r26	; 0x800281 <g_pos_control+0x2>
     4fa:	b0 93 82 02 	sts	0x0282, r27	; 0x800282 <g_pos_control+0x3>
		}
		else if(g_pos_control < -642.){
     4fe:	1b c0       	rjmp	.+54     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
     500:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <g_pos_control>
     504:	70 91 80 02 	lds	r23, 0x0280	; 0x800280 <g_pos_control+0x1>
     508:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <g_pos_control+0x2>
     50c:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <g_pos_control+0x3>
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	30 e8       	ldi	r19, 0x80	; 128
     514:	40 e2       	ldi	r20, 0x20	; 32
     516:	54 ec       	ldi	r21, 0xC4	; 196
     518:	c1 d5       	rcall	.+2946   	; 0x109c <__cmpsf2>
     51a:	88 23       	and	r24, r24
     51c:	64 f4       	brge	.+24     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
			g_pos_control = -642.;
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e8       	ldi	r25, 0x80	; 128
     522:	a0 e2       	ldi	r26, 0x20	; 32
     524:	b4 ec       	ldi	r27, 0xC4	; 196
     526:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <g_pos_control>
     52a:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <g_pos_control+0x1>
     52e:	a0 93 81 02 	sts	0x0281, r26	; 0x800281 <g_pos_control+0x2>
     532:	b0 93 82 02 	sts	0x0282, r27	; 0x800282 <g_pos_control+0x3>
		}
		// User Angluar Velocity Saturation 
		if(g_pos_control > g_Vlimit){
     536:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <g_pos_control>
     53a:	70 91 80 02 	lds	r23, 0x0280	; 0x800280 <g_pos_control+0x1>
     53e:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <g_pos_control+0x2>
     542:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <g_pos_control+0x3>
     546:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <g_Vlimit>
     54a:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <g_Vlimit+0x1>
     54e:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <g_Vlimit+0x2>
     552:	50 91 24 01 	lds	r21, 0x0124	; 0x800124 <g_Vlimit+0x3>
     556:	f1 d6       	rcall	.+3554   	; 0x133a <__gesf2>
     558:	18 16       	cp	r1, r24
     55a:	8c f4       	brge	.+34     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
			g_pos_control = g_Vlimit;
     55c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <g_Vlimit>
     560:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <g_Vlimit+0x1>
     564:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <g_Vlimit+0x2>
     568:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <g_Vlimit+0x3>
     56c:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <g_pos_control>
     570:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <g_pos_control+0x1>
     574:	a0 93 81 02 	sts	0x0281, r26	; 0x800281 <g_pos_control+0x2>
     578:	b0 93 82 02 	sts	0x0282, r27	; 0x800282 <g_pos_control+0x3>
		}
		else if(g_pos_control < -g_Vlimit){
     57c:	27 c0       	rjmp	.+78     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     57e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <g_Vlimit>
     582:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <g_Vlimit+0x1>
     586:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <g_Vlimit+0x2>
     58a:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <g_Vlimit+0x3>
     58e:	20 91 7f 02 	lds	r18, 0x027F	; 0x80027f <g_pos_control>
     592:	30 91 80 02 	lds	r19, 0x0280	; 0x800280 <g_pos_control+0x1>
     596:	40 91 81 02 	lds	r20, 0x0281	; 0x800281 <g_pos_control+0x2>
     59a:	50 91 82 02 	lds	r21, 0x0282	; 0x800282 <g_pos_control+0x3>
     59e:	bc 01       	movw	r22, r24
     5a0:	cd 01       	movw	r24, r26
     5a2:	90 58       	subi	r25, 0x80	; 128
     5a4:	ca d6       	rcall	.+3476   	; 0x133a <__gesf2>
     5a6:	18 16       	cp	r1, r24
     5a8:	8c f4       	brge	.+34     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
			g_pos_control = -g_Vlimit;
     5aa:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <g_Vlimit>
     5ae:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <g_Vlimit+0x1>
     5b2:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <g_Vlimit+0x2>
     5b6:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <g_Vlimit+0x3>
     5ba:	b0 58       	subi	r27, 0x80	; 128
     5bc:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <g_pos_control>
     5c0:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <g_pos_control+0x1>
     5c4:	a0 93 81 02 	sts	0x0281, r26	; 0x800281 <g_pos_control+0x2>
     5c8:	b0 93 82 02 	sts	0x0282, r27	; 0x800282 <g_pos_control+0x3>
		}
		g_TimerCnt = 0;
     5cc:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <g_TimerCnt>
	}
	//////////////////
	// Velocity Control
	if((g_TimerCnt % 10) == 0){
     5d0:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <g_TimerCnt>
     5d4:	8d ec       	ldi	r24, 0xCD	; 205
     5d6:	28 9f       	mul	r18, r24
     5d8:	81 2d       	mov	r24, r1
     5da:	11 24       	eor	r1, r1
     5dc:	86 95       	lsr	r24
     5de:	86 95       	lsr	r24
     5e0:	86 95       	lsr	r24
     5e2:	88 0f       	add	r24, r24
     5e4:	98 2f       	mov	r25, r24
     5e6:	99 0f       	add	r25, r25
     5e8:	99 0f       	add	r25, r25
     5ea:	89 0f       	add	r24, r25
     5ec:	28 13       	cpse	r18, r24
     5ee:	d3 c1       	rjmp	.+934    	; 0x996 <__LOCK_REGION_LENGTH__+0x596>
		/*g_Vdes = g_pos_control;*/
		g_Vdes = g_pos_control;
     5f0:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <g_pos_control>
     5f4:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <g_pos_control+0x1>
     5f8:	a0 91 81 02 	lds	r26, 0x0281	; 0x800281 <g_pos_control+0x2>
     5fc:	b0 91 82 02 	lds	r27, 0x0282	; 0x800282 <g_pos_control+0x3>
     600:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <g_Vdes>
     604:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <g_Vdes+0x1>
     608:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <g_Vdes+0x2>
     60c:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <g_Vdes+0x3>
		g_Verr = g_Vdes - g_Vcur;
     610:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <g_Vdes>
     614:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <g_Vdes+0x1>
     618:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <g_Vdes+0x2>
     61c:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <g_Vdes+0x3>
     620:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <g_Vcur>
     624:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <g_Vcur+0x1>
     628:	40 91 34 01 	lds	r20, 0x0134	; 0x800134 <g_Vcur+0x2>
     62c:	50 91 35 01 	lds	r21, 0x0135	; 0x800135 <g_Vcur+0x3>
     630:	d0 d4       	rcall	.+2464   	; 0xfd2 <__subsf3>
     632:	60 93 83 02 	sts	0x0283, r22	; 0x800283 <g_Verr>
     636:	70 93 84 02 	sts	0x0284, r23	; 0x800284 <g_Verr+0x1>
     63a:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <g_Verr+0x2>
     63e:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <g_Verr+0x3>
		// Velocity PI Control
		g_vel_control = g_Verr * Kp_v + g_Verr_sum * Ki_v * (dt *10 ); // *10
     642:	80 90 83 02 	lds	r8, 0x0283	; 0x800283 <g_Verr>
     646:	90 90 84 02 	lds	r9, 0x0284	; 0x800284 <g_Verr+0x1>
     64a:	a0 90 85 02 	lds	r10, 0x0285	; 0x800285 <g_Verr+0x2>
     64e:	b0 90 86 02 	lds	r11, 0x0286	; 0x800286 <g_Verr+0x3>
     652:	c0 90 0c 01 	lds	r12, 0x010C	; 0x80010c <Kp_v>
     656:	d0 90 0d 01 	lds	r13, 0x010D	; 0x80010d <Kp_v+0x1>
     65a:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <Kp_v+0x2>
     65e:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <Kp_v+0x3>
     662:	60 91 58 02 	lds	r22, 0x0258	; 0x800258 <g_Verr_sum>
     666:	70 91 59 02 	lds	r23, 0x0259	; 0x800259 <g_Verr_sum+0x1>
     66a:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <g_Verr_sum+0x2>
     66e:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <g_Verr_sum+0x3>
     672:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <Ki_v>
     676:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <Ki_v+0x1>
     67a:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <Ki_v+0x2>
     67e:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <Ki_v+0x3>
     682:	40 90 18 01 	lds	r4, 0x0118	; 0x800118 <dt>
     686:	50 90 19 01 	lds	r5, 0x0119	; 0x800119 <dt+0x1>
     68a:	60 90 1a 01 	lds	r6, 0x011A	; 0x80011a <dt+0x2>
     68e:	70 90 1b 01 	lds	r7, 0x011B	; 0x80011b <dt+0x3>
     692:	57 d6       	rcall	.+3246   	; 0x1342 <__mulsf3>
     694:	69 83       	std	Y+1, r22	; 0x01
     696:	7a 83       	std	Y+2, r23	; 0x02
     698:	8b 83       	std	Y+3, r24	; 0x03
     69a:	9c 83       	std	Y+4, r25	; 0x04
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	40 e2       	ldi	r20, 0x20	; 32
     6a2:	51 e4       	ldi	r21, 0x41	; 65
     6a4:	c3 01       	movw	r24, r6
     6a6:	b2 01       	movw	r22, r4
     6a8:	4c d6       	rcall	.+3224   	; 0x1342 <__mulsf3>
     6aa:	9b 01       	movw	r18, r22
     6ac:	ac 01       	movw	r20, r24
     6ae:	69 81       	ldd	r22, Y+1	; 0x01
     6b0:	7a 81       	ldd	r23, Y+2	; 0x02
     6b2:	8b 81       	ldd	r24, Y+3	; 0x03
     6b4:	9c 81       	ldd	r25, Y+4	; 0x04
     6b6:	45 d6       	rcall	.+3210   	; 0x1342 <__mulsf3>
     6b8:	2b 01       	movw	r4, r22
     6ba:	3c 01       	movw	r6, r24
     6bc:	a7 01       	movw	r20, r14
     6be:	96 01       	movw	r18, r12
     6c0:	c5 01       	movw	r24, r10
     6c2:	b4 01       	movw	r22, r8
     6c4:	3e d6       	rcall	.+3196   	; 0x1342 <__mulsf3>
     6c6:	9b 01       	movw	r18, r22
     6c8:	ac 01       	movw	r20, r24
     6ca:	c3 01       	movw	r24, r6
     6cc:	b2 01       	movw	r22, r4
     6ce:	82 d4       	rcall	.+2308   	; 0xfd4 <__addsf3>
     6d0:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <g_vel_control>
     6d4:	70 93 77 02 	sts	0x0277, r23	; 0x800277 <g_vel_control+0x1>
     6d8:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <g_vel_control+0x2>
     6dc:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <g_vel_control+0x3>
		g_Verr_sum += g_Verr;
     6e0:	60 91 83 02 	lds	r22, 0x0283	; 0x800283 <g_Verr>
     6e4:	70 91 84 02 	lds	r23, 0x0284	; 0x800284 <g_Verr+0x1>
     6e8:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <g_Verr+0x2>
     6ec:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <g_Verr+0x3>
     6f0:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <g_Verr_sum>
     6f4:	30 91 59 02 	lds	r19, 0x0259	; 0x800259 <g_Verr_sum+0x1>
     6f8:	40 91 5a 02 	lds	r20, 0x025A	; 0x80025a <g_Verr_sum+0x2>
     6fc:	50 91 5b 02 	lds	r21, 0x025B	; 0x80025b <g_Verr_sum+0x3>
     700:	69 d4       	rcall	.+2258   	; 0xfd4 <__addsf3>
     702:	60 93 58 02 	sts	0x0258, r22	; 0x800258 <g_Verr_sum>
     706:	70 93 59 02 	sts	0x0259, r23	; 0x800259 <g_Verr_sum+0x1>
     70a:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <g_Verr_sum+0x2>
     70e:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <g_Verr_sum+0x3>
// 		}
// 		else if(g_vel_control < -27.3){
// 			g_Verr_sum -= (g_vel_control + 27.3) * 1. / Kp_v / 3.;
// 			g_vel_control = -27.3;
// 		}
		if(g_vel_control > 2.08){
     712:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <g_vel_control>
     716:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <g_vel_control+0x1>
     71a:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <g_vel_control+0x2>
     71e:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <g_vel_control+0x3>
     722:	28 eb       	ldi	r18, 0xB8	; 184
     724:	3e e1       	ldi	r19, 0x1E	; 30
     726:	45 e0       	ldi	r20, 0x05	; 5
     728:	50 e4       	ldi	r21, 0x40	; 64
     72a:	07 d6       	rcall	.+3086   	; 0x133a <__gesf2>
     72c:	18 16       	cp	r1, r24
     72e:	0c f0       	brlt	.+2      	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
			g_Verr_sum -= (g_vel_control - 2.08) * 1. / Kp_v / 3.;
     730:	3f c0       	rjmp	.+126    	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
     732:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <g_vel_control>
     736:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <g_vel_control+0x1>
     73a:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <g_vel_control+0x2>
     73e:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <g_vel_control+0x3>
     742:	80 90 0c 01 	lds	r8, 0x010C	; 0x80010c <Kp_v>
     746:	90 90 0d 01 	lds	r9, 0x010D	; 0x80010d <Kp_v+0x1>
     74a:	a0 90 0e 01 	lds	r10, 0x010E	; 0x80010e <Kp_v+0x2>
     74e:	b0 90 0f 01 	lds	r11, 0x010F	; 0x80010f <Kp_v+0x3>
     752:	c0 90 58 02 	lds	r12, 0x0258	; 0x800258 <g_Verr_sum>
     756:	d0 90 59 02 	lds	r13, 0x0259	; 0x800259 <g_Verr_sum+0x1>
     75a:	e0 90 5a 02 	lds	r14, 0x025A	; 0x80025a <g_Verr_sum+0x2>
     75e:	f0 90 5b 02 	lds	r15, 0x025B	; 0x80025b <g_Verr_sum+0x3>
     762:	28 eb       	ldi	r18, 0xB8	; 184
     764:	3e e1       	ldi	r19, 0x1E	; 30
     766:	45 e0       	ldi	r20, 0x05	; 5
     768:	50 e4       	ldi	r21, 0x40	; 64
     76a:	33 d4       	rcall	.+2150   	; 0xfd2 <__subsf3>
     76c:	a5 01       	movw	r20, r10
     76e:	94 01       	movw	r18, r8
     770:	99 d4       	rcall	.+2354   	; 0x10a4 <__divsf3>
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e4       	ldi	r20, 0x40	; 64
     778:	50 e4       	ldi	r21, 0x40	; 64
     77a:	94 d4       	rcall	.+2344   	; 0x10a4 <__divsf3>
     77c:	9b 01       	movw	r18, r22
     77e:	ac 01       	movw	r20, r24
     780:	c7 01       	movw	r24, r14
     782:	b6 01       	movw	r22, r12
     784:	26 d4       	rcall	.+2124   	; 0xfd2 <__subsf3>
     786:	60 93 58 02 	sts	0x0258, r22	; 0x800258 <g_Verr_sum>
     78a:	70 93 59 02 	sts	0x0259, r23	; 0x800259 <g_Verr_sum+0x1>
     78e:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <g_Verr_sum+0x2>
     792:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <g_Verr_sum+0x3>
			g_vel_control = 2.08;
     796:	88 eb       	ldi	r24, 0xB8	; 184
     798:	9e e1       	ldi	r25, 0x1E	; 30
     79a:	a5 e0       	ldi	r26, 0x05	; 5
     79c:	b0 e4       	ldi	r27, 0x40	; 64
     79e:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <g_vel_control>
     7a2:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <g_vel_control+0x1>
     7a6:	a0 93 78 02 	sts	0x0278, r26	; 0x800278 <g_vel_control+0x2>
     7aa:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <g_vel_control+0x3>
     7ae:	4e c0       	rjmp	.+156    	; 0x84c <__LOCK_REGION_LENGTH__+0x44c>
		}
		else if(g_vel_control < -2.08){
     7b0:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <g_vel_control>
     7b4:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <g_vel_control+0x1>
     7b8:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <g_vel_control+0x2>
     7bc:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <g_vel_control+0x3>
     7c0:	28 eb       	ldi	r18, 0xB8	; 184
     7c2:	3e e1       	ldi	r19, 0x1E	; 30
     7c4:	45 e0       	ldi	r20, 0x05	; 5
     7c6:	50 ec       	ldi	r21, 0xC0	; 192
     7c8:	69 d4       	rcall	.+2258   	; 0x109c <__cmpsf2>
     7ca:	88 23       	and	r24, r24
     7cc:	0c f0       	brlt	.+2      	; 0x7d0 <__LOCK_REGION_LENGTH__+0x3d0>
			g_Verr_sum -= (g_vel_control + 2.08) * 1. / Kp_v / 3.;
     7ce:	3e c0       	rjmp	.+124    	; 0x84c <__LOCK_REGION_LENGTH__+0x44c>
     7d0:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <g_vel_control>
     7d4:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <g_vel_control+0x1>
     7d8:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <g_vel_control+0x2>
     7dc:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <g_vel_control+0x3>
     7e0:	80 90 0c 01 	lds	r8, 0x010C	; 0x80010c <Kp_v>
     7e4:	90 90 0d 01 	lds	r9, 0x010D	; 0x80010d <Kp_v+0x1>
     7e8:	a0 90 0e 01 	lds	r10, 0x010E	; 0x80010e <Kp_v+0x2>
     7ec:	b0 90 0f 01 	lds	r11, 0x010F	; 0x80010f <Kp_v+0x3>
     7f0:	c0 90 58 02 	lds	r12, 0x0258	; 0x800258 <g_Verr_sum>
     7f4:	d0 90 59 02 	lds	r13, 0x0259	; 0x800259 <g_Verr_sum+0x1>
     7f8:	e0 90 5a 02 	lds	r14, 0x025A	; 0x80025a <g_Verr_sum+0x2>
     7fc:	f0 90 5b 02 	lds	r15, 0x025B	; 0x80025b <g_Verr_sum+0x3>
     800:	28 eb       	ldi	r18, 0xB8	; 184
     802:	3e e1       	ldi	r19, 0x1E	; 30
     804:	45 e0       	ldi	r20, 0x05	; 5
     806:	50 e4       	ldi	r21, 0x40	; 64
     808:	e5 d3       	rcall	.+1994   	; 0xfd4 <__addsf3>
     80a:	a5 01       	movw	r20, r10
     80c:	94 01       	movw	r18, r8
     80e:	4a d4       	rcall	.+2196   	; 0x10a4 <__divsf3>
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	40 e4       	ldi	r20, 0x40	; 64
     816:	50 e4       	ldi	r21, 0x40	; 64
     818:	45 d4       	rcall	.+2186   	; 0x10a4 <__divsf3>
     81a:	9b 01       	movw	r18, r22
     81c:	ac 01       	movw	r20, r24
     81e:	c7 01       	movw	r24, r14
     820:	b6 01       	movw	r22, r12
     822:	d7 d3       	rcall	.+1966   	; 0xfd2 <__subsf3>
     824:	60 93 58 02 	sts	0x0258, r22	; 0x800258 <g_Verr_sum>
     828:	70 93 59 02 	sts	0x0259, r23	; 0x800259 <g_Verr_sum+0x1>
     82c:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <g_Verr_sum+0x2>
     830:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <g_Verr_sum+0x3>
     834:	88 eb       	ldi	r24, 0xB8	; 184
     836:	9e e1       	ldi	r25, 0x1E	; 30
			g_vel_control = -2.08;
     838:	a5 e0       	ldi	r26, 0x05	; 5
     83a:	b0 ec       	ldi	r27, 0xC0	; 192
     83c:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <g_vel_control>
     840:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <g_vel_control+0x1>
     844:	a0 93 78 02 	sts	0x0278, r26	; 0x800278 <g_vel_control+0x2>
     848:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <g_vel_control+0x3>
     84c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <g_Vdes>
		}
		g_err_sum_saturation = g_Vdes;
     850:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <g_Vdes+0x1>
     854:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <g_Vdes+0x2>
     858:	b0 91 28 01 	lds	r27, 0x0128	; 0x800128 <g_Vdes+0x3>
     85c:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <g_err_sum_saturation>
     860:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <g_err_sum_saturation+0x1>
     864:	a0 93 4e 02 	sts	0x024E, r26	; 0x80024e <g_err_sum_saturation+0x2>
     868:	b0 93 4f 02 	sts	0x024F, r27	; 0x80024f <g_err_sum_saturation+0x3>
     86c:	60 91 58 02 	lds	r22, 0x0258	; 0x800258 <g_Verr_sum>
		if(g_Verr_sum > g_err_sum_saturation) g_Verr_sum = g_err_sum_saturation;
     870:	70 91 59 02 	lds	r23, 0x0259	; 0x800259 <g_Verr_sum+0x1>
     874:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <g_Verr_sum+0x2>
     878:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <g_Verr_sum+0x3>
     87c:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <g_err_sum_saturation>
     880:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <g_err_sum_saturation+0x1>
     884:	40 91 4e 02 	lds	r20, 0x024E	; 0x80024e <g_err_sum_saturation+0x2>
     888:	50 91 4f 02 	lds	r21, 0x024F	; 0x80024f <g_err_sum_saturation+0x3>
     88c:	56 d5       	rcall	.+2732   	; 0x133a <__gesf2>
     88e:	18 16       	cp	r1, r24
     890:	84 f4       	brge	.+32     	; 0x8b2 <__LOCK_REGION_LENGTH__+0x4b2>
     892:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <g_err_sum_saturation>
     896:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <g_err_sum_saturation+0x1>
     89a:	a0 91 4e 02 	lds	r26, 0x024E	; 0x80024e <g_err_sum_saturation+0x2>
     89e:	b0 91 4f 02 	lds	r27, 0x024F	; 0x80024f <g_err_sum_saturation+0x3>
     8a2:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <g_Verr_sum>
     8a6:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <g_Verr_sum+0x1>
     8aa:	a0 93 5a 02 	sts	0x025A, r26	; 0x80025a <g_Verr_sum+0x2>
     8ae:	b0 93 5b 02 	sts	0x025B, r27	; 0x80025b <g_Verr_sum+0x3>
     8b2:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <g_err_sum_saturation>
		if(g_Verr_sum < -g_err_sum_saturation) g_Verr_sum = -g_err_sum_saturation;
     8b6:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <g_err_sum_saturation+0x1>
     8ba:	a0 91 4e 02 	lds	r26, 0x024E	; 0x80024e <g_err_sum_saturation+0x2>
     8be:	b0 91 4f 02 	lds	r27, 0x024F	; 0x80024f <g_err_sum_saturation+0x3>
     8c2:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <g_Verr_sum>
     8c6:	30 91 59 02 	lds	r19, 0x0259	; 0x800259 <g_Verr_sum+0x1>
     8ca:	40 91 5a 02 	lds	r20, 0x025A	; 0x80025a <g_Verr_sum+0x2>
     8ce:	50 91 5b 02 	lds	r21, 0x025B	; 0x80025b <g_Verr_sum+0x3>
     8d2:	bc 01       	movw	r22, r24
     8d4:	cd 01       	movw	r24, r26
     8d6:	90 58       	subi	r25, 0x80	; 128
     8d8:	30 d5       	rcall	.+2656   	; 0x133a <__gesf2>
     8da:	18 16       	cp	r1, r24
     8dc:	8c f4       	brge	.+34     	; 0x900 <__LOCK_REGION_LENGTH__+0x500>
     8de:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <g_err_sum_saturation>
     8e2:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <g_err_sum_saturation+0x1>
     8e6:	a0 91 4e 02 	lds	r26, 0x024E	; 0x80024e <g_err_sum_saturation+0x2>
     8ea:	b0 91 4f 02 	lds	r27, 0x024F	; 0x80024f <g_err_sum_saturation+0x3>
     8ee:	b0 58       	subi	r27, 0x80	; 128
     8f0:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <g_Verr_sum>
     8f4:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <g_Verr_sum+0x1>
     8f8:	a0 93 5a 02 	sts	0x025A, r26	; 0x80025a <g_Verr_sum+0x2>
     8fc:	b0 93 5b 02 	sts	0x025B, r27	; 0x80025b <g_Verr_sum+0x3>
     900:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <g_vel_control>
		// User Current Saturation
		//g_Climit /= Ke;
		if(g_vel_control > g_Climit){
     904:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <g_vel_control+0x1>
     908:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <g_vel_control+0x2>
     90c:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <g_vel_control+0x3>
     910:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <g_Climit>
     914:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <g_Climit+0x1>
     918:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <g_Climit+0x2>
     91c:	50 91 20 01 	lds	r21, 0x0120	; 0x800120 <g_Climit+0x3>
     920:	0c d5       	rcall	.+2584   	; 0x133a <__gesf2>
     922:	18 16       	cp	r1, r24
     924:	8c f4       	brge	.+34     	; 0x948 <__LOCK_REGION_LENGTH__+0x548>
     926:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <g_Climit>
			g_vel_control = g_Climit;
     92a:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <g_Climit+0x1>
     92e:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <g_Climit+0x2>
     932:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <g_Climit+0x3>
     936:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <g_vel_control>
     93a:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <g_vel_control+0x1>
     93e:	a0 93 78 02 	sts	0x0278, r26	; 0x800278 <g_vel_control+0x2>
     942:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <g_vel_control+0x3>
     946:	27 c0       	rjmp	.+78     	; 0x996 <__LOCK_REGION_LENGTH__+0x596>
     948:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <g_Climit>
		}
		else if(g_vel_control < -g_Climit){
     94c:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <g_Climit+0x1>
     950:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <g_Climit+0x2>
     954:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <g_Climit+0x3>
     958:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <g_vel_control>
     95c:	30 91 77 02 	lds	r19, 0x0277	; 0x800277 <g_vel_control+0x1>
     960:	40 91 78 02 	lds	r20, 0x0278	; 0x800278 <g_vel_control+0x2>
     964:	50 91 79 02 	lds	r21, 0x0279	; 0x800279 <g_vel_control+0x3>
     968:	bc 01       	movw	r22, r24
     96a:	cd 01       	movw	r24, r26
     96c:	90 58       	subi	r25, 0x80	; 128
     96e:	e5 d4       	rcall	.+2506   	; 0x133a <__gesf2>
     970:	18 16       	cp	r1, r24
     972:	8c f4       	brge	.+34     	; 0x996 <__LOCK_REGION_LENGTH__+0x596>
     974:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <g_Climit>
			g_vel_control = -g_Climit;
     978:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <g_Climit+0x1>
     97c:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <g_Climit+0x2>
     980:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <g_Climit+0x3>
     984:	b0 58       	subi	r27, 0x80	; 128
     986:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <g_vel_control>
     98a:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <g_vel_control+0x1>
     98e:	a0 93 78 02 	sts	0x0278, r26	; 0x800278 <g_vel_control+0x2>
     992:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <g_vel_control+0x3>
     996:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <g_TimerCnt>
		}
	}
	//////////////////
	// Current Control
	if((g_TimerCnt % 1) == 0){
     99a:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <g_vel_control>
			/*g_Cdes = g_vel_control;*/
			g_Cdes = g_vel_control;			
     99e:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <g_vel_control+0x1>
     9a2:	a0 91 78 02 	lds	r26, 0x0278	; 0x800278 <g_vel_control+0x2>
     9a6:	b0 91 79 02 	lds	r27, 0x0279	; 0x800279 <g_vel_control+0x3>
     9aa:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <g_Cdes>
     9ae:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <g_Cdes+0x1>
     9b2:	a0 93 52 02 	sts	0x0252, r26	; 0x800252 <g_Cdes+0x2>
     9b6:	b0 93 53 02 	sts	0x0253, r27	; 0x800253 <g_Cdes+0x3>
     9ba:	60 91 50 02 	lds	r22, 0x0250	; 0x800250 <g_Cdes>
			g_Cerr = g_Cdes - g_Ccur;
     9be:	70 91 51 02 	lds	r23, 0x0251	; 0x800251 <g_Cdes+0x1>
     9c2:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <g_Cdes+0x2>
     9c6:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <g_Cdes+0x3>
     9ca:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <g_Ccur>
     9ce:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <g_Ccur+0x1>
     9d2:	40 91 4a 02 	lds	r20, 0x024A	; 0x80024a <g_Ccur+0x2>
     9d6:	50 91 4b 02 	lds	r21, 0x024B	; 0x80024b <g_Ccur+0x3>
     9da:	fb d2       	rcall	.+1526   	; 0xfd2 <__subsf3>
     9dc:	60 93 3e 02 	sts	0x023E, r22	; 0x80023e <g_Cerr>
     9e0:	70 93 3f 02 	sts	0x023F, r23	; 0x80023f <g_Cerr+0x1>
     9e4:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <g_Cerr+0x2>
     9e8:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <g_Cerr+0x3>
			// Current PI Control // cur
			cur_control = g_Cerr * Kp_c + g_Cerr_sum * Ki_c * dt;
     9ec:	80 90 3e 02 	lds	r8, 0x023E	; 0x80023e <g_Cerr>
     9f0:	90 90 3f 02 	lds	r9, 0x023F	; 0x80023f <g_Cerr+0x1>
     9f4:	a0 90 40 02 	lds	r10, 0x0240	; 0x800240 <g_Cerr+0x2>
     9f8:	b0 90 41 02 	lds	r11, 0x0241	; 0x800241 <g_Cerr+0x3>
     9fc:	40 90 14 01 	lds	r4, 0x0114	; 0x800114 <Kp_c>
     a00:	50 90 15 01 	lds	r5, 0x0115	; 0x800115 <Kp_c+0x1>
     a04:	60 90 16 01 	lds	r6, 0x0116	; 0x800116 <Kp_c+0x2>
     a08:	70 90 17 01 	lds	r7, 0x0117	; 0x800117 <Kp_c+0x3>
     a0c:	60 91 94 02 	lds	r22, 0x0294	; 0x800294 <g_Cerr_sum>
     a10:	70 91 95 02 	lds	r23, 0x0295	; 0x800295 <g_Cerr_sum+0x1>
     a14:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <g_Cerr_sum+0x2>
     a18:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <g_Cerr_sum+0x3>
     a1c:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <Ki_c>
     a20:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <Ki_c+0x1>
     a24:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <Ki_c+0x2>
     a28:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <Ki_c+0x3>
     a2c:	c0 90 18 01 	lds	r12, 0x0118	; 0x800118 <dt>
     a30:	d0 90 19 01 	lds	r13, 0x0119	; 0x800119 <dt+0x1>
     a34:	e0 90 1a 01 	lds	r14, 0x011A	; 0x80011a <dt+0x2>
     a38:	f0 90 1b 01 	lds	r15, 0x011B	; 0x80011b <dt+0x3>
     a3c:	82 d4       	rcall	.+2308   	; 0x1342 <__mulsf3>
     a3e:	a7 01       	movw	r20, r14
     a40:	96 01       	movw	r18, r12
     a42:	7f d4       	rcall	.+2302   	; 0x1342 <__mulsf3>
     a44:	6b 01       	movw	r12, r22
     a46:	7c 01       	movw	r14, r24
     a48:	a3 01       	movw	r20, r6
     a4a:	92 01       	movw	r18, r4
     a4c:	c5 01       	movw	r24, r10
     a4e:	b4 01       	movw	r22, r8
     a50:	78 d4       	rcall	.+2288   	; 0x1342 <__mulsf3>
     a52:	9b 01       	movw	r18, r22
     a54:	ac 01       	movw	r20, r24
     a56:	c7 01       	movw	r24, r14
     a58:	b6 01       	movw	r22, r12
     a5a:	bc d2       	rcall	.+1400   	; 0xfd4 <__addsf3>
     a5c:	8b d3       	rcall	.+1814   	; 0x1174 <__fixsfsi>
     a5e:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__data_end+0x1>
			// 전향 보상
			cur_control += g_Vcur * Ke;
     a62:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__data_end>
     a66:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <g_Vcur>
     a6a:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <g_Vcur+0x1>
     a6e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <g_Vcur+0x2>
     a72:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <g_Vcur+0x3>
     a76:	e0 90 2a 01 	lds	r14, 0x012A	; 0x80012a <__data_end>
     a7a:	f0 90 2b 01 	lds	r15, 0x012B	; 0x80012b <__data_end+0x1>
     a7e:	2f ed       	ldi	r18, 0xDF	; 223
     a80:	30 ee       	ldi	r19, 0xE0	; 224
     a82:	4b e8       	ldi	r20, 0x8B	; 139
     a84:	5d e3       	ldi	r21, 0x3D	; 61
     a86:	5d d4       	rcall	.+2234   	; 0x1342 <__mulsf3>
     a88:	4b 01       	movw	r8, r22
     a8a:	5c 01       	movw	r10, r24
     a8c:	b7 01       	movw	r22, r14
     a8e:	ff 0c       	add	r15, r15
     a90:	88 0b       	sbc	r24, r24
     a92:	99 0b       	sbc	r25, r25
     a94:	a2 d3       	rcall	.+1860   	; 0x11da <__floatsisf>
     a96:	9b 01       	movw	r18, r22
     a98:	ac 01       	movw	r20, r24
     a9a:	c5 01       	movw	r24, r10
     a9c:	b4 01       	movw	r22, r8
     a9e:	9a d2       	rcall	.+1332   	; 0xfd4 <__addsf3>
     aa0:	69 d3       	rcall	.+1746   	; 0x1174 <__fixsfsi>
     aa2:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__data_end+0x1>
     aa6:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__data_end>
     aaa:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <g_Cerr>
			
			g_Cerr_sum += g_Cerr;
     aae:	70 91 3f 02 	lds	r23, 0x023F	; 0x80023f <g_Cerr+0x1>
     ab2:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <g_Cerr+0x2>
     ab6:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <g_Cerr+0x3>
     aba:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <g_Cerr_sum>
     abe:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <g_Cerr_sum+0x1>
     ac2:	40 91 96 02 	lds	r20, 0x0296	; 0x800296 <g_Cerr_sum+0x2>
     ac6:	50 91 97 02 	lds	r21, 0x0297	; 0x800297 <g_Cerr_sum+0x3>
     aca:	84 d2       	rcall	.+1288   	; 0xfd4 <__addsf3>
     acc:	60 93 94 02 	sts	0x0294, r22	; 0x800294 <g_Cerr_sum>
     ad0:	70 93 95 02 	sts	0x0295, r23	; 0x800295 <g_Cerr_sum+0x1>
     ad4:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <g_Cerr_sum+0x2>
			// Norminal Voltage Saturation
			// I-term anti
			if(cur_control > 24){
     ad8:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <g_Cerr_sum+0x3>
     adc:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     ae0:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
     ae4:	49 97       	sbiw	r24, 0x19	; 25
				g_Cerr_sum -= (cur_control - 24.) * 1. / Kp_c / 3.;
     ae6:	0c f4       	brge	.+2      	; 0xaea <__LOCK_REGION_LENGTH__+0x6ea>
     ae8:	3a c0       	rjmp	.+116    	; 0xb5e <__LOCK_REGION_LENGTH__+0x75e>
     aea:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <__data_end>
     aee:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <__data_end+0x1>
     af2:	80 90 14 01 	lds	r8, 0x0114	; 0x800114 <Kp_c>
     af6:	90 90 15 01 	lds	r9, 0x0115	; 0x800115 <Kp_c+0x1>
     afa:	a0 90 16 01 	lds	r10, 0x0116	; 0x800116 <Kp_c+0x2>
     afe:	b0 90 17 01 	lds	r11, 0x0117	; 0x800117 <Kp_c+0x3>
     b02:	c0 90 94 02 	lds	r12, 0x0294	; 0x800294 <g_Cerr_sum>
     b06:	d0 90 95 02 	lds	r13, 0x0295	; 0x800295 <g_Cerr_sum+0x1>
     b0a:	e0 90 96 02 	lds	r14, 0x0296	; 0x800296 <g_Cerr_sum+0x2>
     b0e:	f0 90 97 02 	lds	r15, 0x0297	; 0x800297 <g_Cerr_sum+0x3>
     b12:	07 2e       	mov	r0, r23
     b14:	00 0c       	add	r0, r0
     b16:	88 0b       	sbc	r24, r24
     b18:	99 0b       	sbc	r25, r25
     b1a:	5f d3       	rcall	.+1726   	; 0x11da <__floatsisf>
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	40 ec       	ldi	r20, 0xC0	; 192
     b22:	51 e4       	ldi	r21, 0x41	; 65
     b24:	56 d2       	rcall	.+1196   	; 0xfd2 <__subsf3>
     b26:	a5 01       	movw	r20, r10
     b28:	94 01       	movw	r18, r8
     b2a:	bc d2       	rcall	.+1400   	; 0x10a4 <__divsf3>
     b2c:	20 e0       	ldi	r18, 0x00	; 0
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	40 e4       	ldi	r20, 0x40	; 64
     b32:	50 e4       	ldi	r21, 0x40	; 64
     b34:	b7 d2       	rcall	.+1390   	; 0x10a4 <__divsf3>
     b36:	9b 01       	movw	r18, r22
     b38:	ac 01       	movw	r20, r24
     b3a:	c7 01       	movw	r24, r14
     b3c:	b6 01       	movw	r22, r12
     b3e:	49 d2       	rcall	.+1170   	; 0xfd2 <__subsf3>
     b40:	60 93 94 02 	sts	0x0294, r22	; 0x800294 <g_Cerr_sum>
     b44:	70 93 95 02 	sts	0x0295, r23	; 0x800295 <g_Cerr_sum+0x1>
     b48:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <g_Cerr_sum+0x2>
				cur_control = 24;
     b4c:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <g_Cerr_sum+0x3>
     b50:	88 e1       	ldi	r24, 0x18	; 24
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__data_end+0x1>
     b58:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
			}
			else if(cur_control < -24){
     b5c:	40 c0       	rjmp	.+128    	; 0xbde <__LOCK_REGION_LENGTH__+0x7de>
     b5e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     b62:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
     b66:	88 3e       	cpi	r24, 0xE8	; 232
				g_Cerr_sum -= (cur_control + 24.) * 1. / Kp_c / 3.;
     b68:	9f 4f       	sbci	r25, 0xFF	; 255
     b6a:	cc f5       	brge	.+114    	; 0xbde <__LOCK_REGION_LENGTH__+0x7de>
     b6c:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <__data_end>
     b70:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <__data_end+0x1>
     b74:	80 90 14 01 	lds	r8, 0x0114	; 0x800114 <Kp_c>
     b78:	90 90 15 01 	lds	r9, 0x0115	; 0x800115 <Kp_c+0x1>
     b7c:	a0 90 16 01 	lds	r10, 0x0116	; 0x800116 <Kp_c+0x2>
     b80:	b0 90 17 01 	lds	r11, 0x0117	; 0x800117 <Kp_c+0x3>
     b84:	c0 90 94 02 	lds	r12, 0x0294	; 0x800294 <g_Cerr_sum>
     b88:	d0 90 95 02 	lds	r13, 0x0295	; 0x800295 <g_Cerr_sum+0x1>
     b8c:	e0 90 96 02 	lds	r14, 0x0296	; 0x800296 <g_Cerr_sum+0x2>
     b90:	f0 90 97 02 	lds	r15, 0x0297	; 0x800297 <g_Cerr_sum+0x3>
     b94:	07 2e       	mov	r0, r23
     b96:	00 0c       	add	r0, r0
     b98:	88 0b       	sbc	r24, r24
     b9a:	99 0b       	sbc	r25, r25
     b9c:	1e d3       	rcall	.+1596   	; 0x11da <__floatsisf>
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 ec       	ldi	r20, 0xC0	; 192
     ba4:	51 e4       	ldi	r21, 0x41	; 65
     ba6:	16 d2       	rcall	.+1068   	; 0xfd4 <__addsf3>
     ba8:	a5 01       	movw	r20, r10
     baa:	94 01       	movw	r18, r8
     bac:	7b d2       	rcall	.+1270   	; 0x10a4 <__divsf3>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e4       	ldi	r20, 0x40	; 64
     bb4:	50 e4       	ldi	r21, 0x40	; 64
     bb6:	76 d2       	rcall	.+1260   	; 0x10a4 <__divsf3>
     bb8:	9b 01       	movw	r18, r22
     bba:	ac 01       	movw	r20, r24
     bbc:	c7 01       	movw	r24, r14
     bbe:	b6 01       	movw	r22, r12
     bc0:	08 d2       	rcall	.+1040   	; 0xfd2 <__subsf3>
     bc2:	60 93 94 02 	sts	0x0294, r22	; 0x800294 <g_Cerr_sum>
     bc6:	70 93 95 02 	sts	0x0295, r23	; 0x800295 <g_Cerr_sum+0x1>
     bca:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <g_Cerr_sum+0x2>
     bce:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <g_Cerr_sum+0x3>
     bd2:	88 ee       	ldi	r24, 0xE8	; 232
				cur_control = -24;
     bd4:	9f ef       	ldi	r25, 0xFF	; 255
     bd6:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__data_end+0x1>
     bda:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
     bde:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <g_TimerCnt>
			}
	}
	//////////////////

	g_TimerCnt++;
     be2:	8f 5f       	subi	r24, 0xFF	; 255
     be4:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <g_TimerCnt>
     be8:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <__data_end>
	/*SetDutyCW(cur_control);*/
	SetDutyCW(cur_control);
     bec:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <__data_end+0x1>
     bf0:	07 2e       	mov	r0, r23
     bf2:	00 0c       	add	r0, r0
     bf4:	88 0b       	sbc	r24, r24
     bf6:	99 0b       	sbc	r25, r25
     bf8:	f0 d2       	rcall	.+1504   	; 0x11da <__floatsisf>
     bfa:	67 da       	rcall	.-2866   	; 0xca <SetDutyCW>
     bfc:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <g_SendFlag>
     c00:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <g_SendFlag+0x1>
	/////////////////////////////////////////
	
	g_SendFlag++;
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <g_SendFlag+0x1>
     c0a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <g_SendFlag>
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0

}
     c14:	0f 90       	pop	r0
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	ff 91       	pop	r31
     c1c:	ef 91       	pop	r30
     c1e:	bf 91       	pop	r27
     c20:	af 91       	pop	r26
     c22:	9f 91       	pop	r25
     c24:	8f 91       	pop	r24
     c26:	7f 91       	pop	r23
     c28:	6f 91       	pop	r22
     c2a:	5f 91       	pop	r21
     c2c:	4f 91       	pop	r20
     c2e:	3f 91       	pop	r19
     c30:	2f 91       	pop	r18
     c32:	ff 90       	pop	r15
     c34:	ef 90       	pop	r14
     c36:	df 90       	pop	r13
     c38:	cf 90       	pop	r12
     c3a:	bf 90       	pop	r11
     c3c:	af 90       	pop	r10
     c3e:	9f 90       	pop	r9
     c40:	8f 90       	pop	r8
     c42:	7f 90       	pop	r7
     c44:	6f 90       	pop	r6
     c46:	5f 90       	pop	r5
     c48:	4f 90       	pop	r4
     c4a:	0f 90       	pop	r0
     c4c:	0b be       	out	0x3b, r0	; 59
     c4e:	0f 90       	pop	r0
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	0f 90       	pop	r0
     c54:	1f 90       	pop	r1
     c56:	18 95       	reti

00000c58 <main>:
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	cd b7       	in	r28, 0x3d	; 61



int main(void){
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	64 97       	sbiw	r28, 0x14	; 20
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
	
	Packet_t packet;
	packet.data.header[0] =	packet.data.header[1] =	packet.data.header[2] =	packet.data.header[3] = 0xFE;
     c6c:	8e ef       	ldi	r24, 0xFE	; 254
     c6e:	8c 83       	std	Y+4, r24	; 0x04
     c70:	8b 83       	std	Y+3, r24	; 0x03
     c72:	8a 83       	std	Y+2, r24	; 0x02
     c74:	89 83       	std	Y+1, r24	; 0x01
	
	InitIO();
     c76:	4a d1       	rcall	.+660    	; 0xf0c <InitIO>
	
	//Uart
	InitUart0();
     c78:	90 d1       	rcall	.+800    	; 0xf9a <InitUart0>
	
	//SPI
	InitSPI();
     c7a:	98 d1       	rcall	.+816    	; 0xfac <InitSPI>
	
	//Timer
	InitTimer0();
     c7c:	54 d1       	rcall	.+680    	; 0xf26 <InitTimer0>
     c7e:	58 d1       	rcall	.+688    	; 0xf30 <InitTimer1>
	InitTimer1();
     c80:	6a d1       	rcall	.+724    	; 0xf56 <InitTimer3>
     c82:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	InitTimer3();
     c86:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>


	TCNT1 = TCNT3 = 0;
     c8a:	1d bc       	out	0x2d, r1	; 45
     c8c:	1c bc       	out	0x2c, r1	; 44
     c8e:	60 e0       	ldi	r22, 0x00	; 0
	SetDutyCW(0.);
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	cb 01       	movw	r24, r22
     c94:	1a da       	rcall	.-3020   	; 0xca <SetDutyCW>
     c96:	7c d1       	rcall	.+760    	; 0xf90 <InitADC>
     c98:	46 da       	rcall	.-2932   	; 0x126 <InitLS7366>
	
	//ADC
	InitADC();
     c9a:	83 e8       	ldi	r24, 0x83	; 131
     c9c:	82 bf       	out	0x32, r24	; 50
	
	//LS7366
	InitLS7366();
     c9e:	78 94       	sei
     ca0:	b1 2c       	mov	r11, r1
	
	//TCNT3 = 65536 - 125;
	TCNT0 = 256 - 125;
     ca2:	0f 2e       	mov	r0, r31
     ca4:	f4 e1       	ldi	r31, 0x14	; 20
	sei();
     ca6:	9f 2e       	mov	r9, r31

	unsigned char check = 0;
     ca8:	f0 2d       	mov	r31, r0
		if(g_SendFlag > 19){
			PORTA &= 0xfc;
			g_SendFlag = 0;

			packet.data.id = g_ID;
			packet.data.size = sizeof(Packet_data_t);
     caa:	0f 2e       	mov	r0, r31
     cac:	f3 e0       	ldi	r31, 0x03	; 3
     cae:	af 2e       	mov	r10, r31
     cb0:	f0 2d       	mov	r31, r0
			packet.data.mode = 3;
     cb2:	7e 01       	movw	r14, r28
     cb4:	85 e1       	ldi	r24, 0x15	; 21
     cb6:	e8 0e       	add	r14, r24
     cb8:	f1 1c       	adc	r15, r1
     cba:	0f 2e       	mov	r0, r31
     cbc:	fe e5       	ldi	r31, 0x5E	; 94
     cbe:	cf 2e       	mov	r12, r31
     cc0:	f2 e0       	ldi	r31, 0x02	; 2
				
				g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
				
				if(checkSize == 8){
					
					if(g_PacketBuffer.data.id == g_ID){
     cc2:	df 2e       	mov	r13, r31
     cc4:	f0 2d       	mov	r31, r0
     cc6:	68 94       	set
     cc8:	77 24       	eor	r7, r7
     cca:	71 f8       	bld	r7, 1
     ccc:	88 24       	eor	r8, r8
						g_PacketMode = 2;
     cce:	83 94       	inc	r8
     cd0:	ba c0       	rjmp	.+372    	; 0xe46 <main+0x1ee>
     cd2:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <g_PacketMode>
			switch(g_PacketMode){
				case 0:
				if(g_buf[g_BufReadCnt] == 0xFF){
					checkSize++;
					if(checkSize == 4){
						g_PacketMode =1;
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	e1 f0       	breq	.+56     	; 0xd12 <main+0xba>

	unsigned char check = 0;
	
    while (1) {
		for(;g_BufReadCnt != g_BufWriteCnt; g_BufReadCnt++){
			switch(g_PacketMode){
     cda:	18 f0       	brcs	.+6      	; 0xce2 <main+0x8a>
     cdc:	82 30       	cpi	r24, 0x02	; 2
     cde:	e1 f1       	breq	.+120    	; 0xd58 <main+0x100>
     ce0:	ad c0       	rjmp	.+346    	; 0xe3c <main+0x1e4>
     ce2:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <g_BufReadCnt>
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	e6 5c       	subi	r30, 0xC6	; 198
				case 0:
				if(g_buf[g_BufReadCnt] == 0xFF){
     cea:	fe 4f       	sbci	r31, 0xFE	; 254
     cec:	80 81       	ld	r24, Z
     cee:	8f 3f       	cpi	r24, 0xFF	; 255
     cf0:	69 f4       	brne	.+26     	; 0xd0c <main+0xb4>
     cf2:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <checkSize>
     cf6:	8f 5f       	subi	r24, 0xFF	; 255
     cf8:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <checkSize>
					checkSize++;
     cfc:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <checkSize>
     d00:	84 30       	cpi	r24, 0x04	; 4
     d02:	09 f0       	breq	.+2      	; 0xd06 <main+0xae>
					if(checkSize == 4){
     d04:	9b c0       	rjmp	.+310    	; 0xe3c <main+0x1e4>
     d06:	80 92 98 02 	sts	0x0298, r8	; 0x800298 <g_PacketMode>
     d0a:	98 c0       	rjmp	.+304    	; 0xe3c <main+0x1e4>
     d0c:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <checkSize>
						g_PacketMode =1;
     d10:	95 c0       	rjmp	.+298    	; 0xe3c <main+0x1e4>
     d12:	e0 91 5d 02 	lds	r30, 0x025D	; 0x80025d <checkSize>
					}
				}
				else{
					checkSize = 0;
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	8e 0f       	add	r24, r30
				}
				break;
				case 1:
				
				g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
     d1a:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <checkSize>
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	a0 91 8b 02 	lds	r26, 0x028B	; 0x80028b <g_BufReadCnt>
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	a6 5c       	subi	r26, 0xC6	; 198
     d28:	be 4f       	sbci	r27, 0xFE	; 254
     d2a:	8c 91       	ld	r24, X
     d2c:	e2 5a       	subi	r30, 0xA2	; 162
     d2e:	fd 4f       	sbci	r31, 0xFD	; 253
     d30:	80 83       	st	Z, r24
     d32:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <checkSize>
     d36:	88 30       	cpi	r24, 0x08	; 8
     d38:	09 f0       	breq	.+2      	; 0xd3c <main+0xe4>
				
				if(checkSize == 8){
     d3a:	80 c0       	rjmp	.+256    	; 0xe3c <main+0x1e4>
     d3c:	f6 01       	movw	r30, r12
     d3e:	95 81       	ldd	r25, Z+5	; 0x05
     d40:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_ID>
					
					if(g_PacketBuffer.data.id == g_ID){
     d44:	98 13       	cpse	r25, r24
     d46:	03 c0       	rjmp	.+6      	; 0xd4e <main+0xf6>
     d48:	70 92 98 02 	sts	0x0298, r7	; 0x800298 <g_PacketMode>
     d4c:	77 c0       	rjmp	.+238    	; 0xe3c <main+0x1e4>
     d4e:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <g_PacketMode>
						g_PacketMode = 2;
     d52:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <checkSize>
						
					}
					else{
						g_PacketMode = 0;
     d56:	72 c0       	rjmp	.+228    	; 0xe3c <main+0x1e4>
     d58:	e0 91 5d 02 	lds	r30, 0x025D	; 0x80025d <checkSize>
						checkSize = 0;
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	8e 0f       	add	r24, r30
					
				}
				break;
				
				case 2:
				g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
     d60:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <checkSize>
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	a0 91 8b 02 	lds	r26, 0x028B	; 0x80028b <g_BufReadCnt>
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	a6 5c       	subi	r26, 0xC6	; 198
     d6e:	be 4f       	sbci	r27, 0xFE	; 254
     d70:	8c 91       	ld	r24, X
     d72:	e2 5a       	subi	r30, 0xA2	; 162
     d74:	fd 4f       	sbci	r31, 0xFD	; 253
     d76:	80 83       	st	Z, r24
     d78:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <g_BufReadCnt>
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	e6 5c       	subi	r30, 0xC6	; 198
				check += g_buf[g_BufReadCnt];
     d80:	fe 4f       	sbci	r31, 0xFE	; 254
     d82:	80 81       	ld	r24, Z
     d84:	b8 0e       	add	r11, r24
     d86:	f6 01       	movw	r30, r12
     d88:	94 81       	ldd	r25, Z+4	; 0x04
     d8a:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <checkSize>
				
				if(checkSize == g_PacketBuffer.data.size){
     d8e:	98 13       	cpse	r25, r24
     d90:	46 c0       	rjmp	.+140    	; 0xe1e <main+0x1c6>
     d92:	87 81       	ldd	r24, Z+7	; 0x07
     d94:	b8 12       	cpse	r11, r24
     d96:	3d c0       	rjmp	.+122    	; 0xe12 <main+0x1ba>
     d98:	86 81       	ldd	r24, Z+6	; 0x06
					if(check == g_PacketBuffer.data.check){
     d9a:	82 30       	cpi	r24, 0x02	; 2
     d9c:	09 f0       	breq	.+2      	; 0xda0 <main+0x148>
						switch(g_PacketBuffer.data.mode){
     d9e:	39 c0       	rjmp	.+114    	; 0xe12 <main+0x1ba>
     da0:	60 85       	ldd	r22, Z+8	; 0x08
     da2:	71 85       	ldd	r23, Z+9	; 0x09
     da4:	82 85       	ldd	r24, Z+10	; 0x0a
							case 2:
							g_Pdes =g_PacketBuffer.data.pos /1000.0;
     da6:	93 85       	ldd	r25, Z+11	; 0x0b
     da8:	18 d2       	rcall	.+1072   	; 0x11da <__floatsisf>
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	4a e7       	ldi	r20, 0x7A	; 122
     db0:	54 e4       	ldi	r21, 0x44	; 68
     db2:	78 d1       	rcall	.+752    	; 0x10a4 <__divsf3>
     db4:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <g_Pdes>
     db8:	70 93 2f 01 	sts	0x012F, r23	; 0x80012f <g_Pdes+0x1>
     dbc:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <g_Pdes+0x2>
     dc0:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <g_Pdes+0x3>
     dc4:	f6 01       	movw	r30, r12
     dc6:	64 85       	ldd	r22, Z+12	; 0x0c
     dc8:	75 85       	ldd	r23, Z+13	; 0x0d
							g_Vlimit=g_PacketBuffer.data.velo /1000.0;
     dca:	86 85       	ldd	r24, Z+14	; 0x0e
     dcc:	97 85       	ldd	r25, Z+15	; 0x0f
     dce:	05 d2       	rcall	.+1034   	; 0x11da <__floatsisf>
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	4a e7       	ldi	r20, 0x7A	; 122
     dd6:	54 e4       	ldi	r21, 0x44	; 68
     dd8:	65 d1       	rcall	.+714    	; 0x10a4 <__divsf3>
     dda:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <g_Vlimit>
     dde:	70 93 22 01 	sts	0x0122, r23	; 0x800122 <g_Vlimit+0x1>
     de2:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <g_Vlimit+0x2>
     de6:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <g_Vlimit+0x3>
     dea:	f6 01       	movw	r30, r12
     dec:	60 89       	ldd	r22, Z+16	; 0x10
     dee:	71 89       	ldd	r23, Z+17	; 0x11
							g_Climit=g_PacketBuffer.data.cur /1000.0;
     df0:	82 89       	ldd	r24, Z+18	; 0x12
     df2:	93 89       	ldd	r25, Z+19	; 0x13
     df4:	f2 d1       	rcall	.+996    	; 0x11da <__floatsisf>
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	4a e7       	ldi	r20, 0x7A	; 122
     dfc:	54 e4       	ldi	r21, 0x44	; 68
     dfe:	52 d1       	rcall	.+676    	; 0x10a4 <__divsf3>
     e00:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <g_Climit>
     e04:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <g_Climit+0x1>
     e08:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <g_Climit+0x2>
     e0c:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <g_Climit+0x3>
     e10:	d8 98       	cbi	0x1b, 0	; 27
     e12:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <g_PacketMode>
     e16:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <checkSize>
							PORTA &= 0xfe;
     e1a:	b1 2c       	mov	r11, r1
							//g_SendFlag = 20;
							break;
						}
					}
					check = 0;
					g_PacketMode = 0;
     e1c:	0f c0       	rjmp	.+30     	; 0xe3c <main+0x1e4>
     e1e:	f6 01       	movw	r30, r12
					checkSize = 0;
     e20:	94 81       	ldd	r25, Z+4	; 0x04
     e22:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <checkSize>
							PORTA &= 0xfe;
							//g_SendFlag = 20;
							break;
						}
					}
					check = 0;
     e26:	98 17       	cp	r25, r24
					g_PacketMode = 0;
					checkSize = 0;
					
				}
				else if(checkSize > g_PacketBuffer.data.size || checkSize > sizeof(Packet_t)){
     e28:	20 f0       	brcs	.+8      	; 0xe32 <main+0x1da>
     e2a:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <checkSize>
     e2e:	85 31       	cpi	r24, 0x15	; 21
     e30:	28 f0       	brcs	.+10     	; 0xe3c <main+0x1e4>
     e32:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <g_PacketMode>
     e36:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <checkSize>
     e3a:	b1 2c       	mov	r11, r1
					check = 0;
					g_PacketMode =0;
     e3c:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <g_BufReadCnt>
					checkSize = 0;
     e40:	8f 5f       	subi	r24, 0xFF	; 255
     e42:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <g_BufReadCnt>
	sei();

	unsigned char check = 0;
	
    while (1) {
		for(;g_BufReadCnt != g_BufWriteCnt; g_BufReadCnt++){
     e46:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <g_BufReadCnt>
     e4a:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <g_BufWriteCnt>
     e4e:	98 13       	cpse	r25, r24
     e50:	40 cf       	rjmp	.-384    	; 0xcd2 <main+0x7a>
     e52:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <g_SendFlag>
     e56:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <g_SendFlag+0x1>
     e5a:	44 97       	sbiw	r24, 0x14	; 20
					checkSize = 0;
				}

			}
		}
		if(g_SendFlag > 19){
     e5c:	a4 f3       	brlt	.-24     	; 0xe46 <main+0x1ee>
     e5e:	8b b3       	in	r24, 0x1b	; 27
     e60:	8c 7f       	andi	r24, 0xFC	; 252
     e62:	8b bb       	out	0x1b, r24	; 27
     e64:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <g_SendFlag+0x1>
			PORTA &= 0xfc;
     e68:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <g_SendFlag>
     e6c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_ID>
			g_SendFlag = 0;
     e70:	8e 83       	std	Y+6, r24	; 0x06
     e72:	9d 82       	std	Y+5, r9	; 0x05
     e74:	af 82       	std	Y+7, r10	; 0x07

			packet.data.id = g_ID;
     e76:	18 86       	std	Y+8, r1	; 0x08
     e78:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <g_Pcur>
			packet.data.size = sizeof(Packet_data_t);
			packet.data.mode = 3;
			packet.data.check = 0;
     e7c:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <g_Pcur+0x1>
			
// 			packet.data.pos=g_Pdes * 1000;
// 			packet.data.velo=g_Vlimit * 1000;
// 			packet.data.cur=g_Climit * 1000;

			packet.data.pos=g_Pcur * 1000;
     e80:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <g_Pcur+0x2>
     e84:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <g_Pcur+0x3>
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	4a e7       	ldi	r20, 0x7A	; 122
     e8e:	54 e4       	ldi	r21, 0x44	; 68
     e90:	58 d2       	rcall	.+1200   	; 0x1342 <__mulsf3>
     e92:	70 d1       	rcall	.+736    	; 0x1174 <__fixsfsi>
     e94:	69 87       	std	Y+9, r22	; 0x09
     e96:	7a 87       	std	Y+10, r23	; 0x0a
     e98:	8b 87       	std	Y+11, r24	; 0x0b
     e9a:	9c 87       	std	Y+12, r25	; 0x0c
     e9c:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <g_Vcur>
     ea0:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <g_Vcur+0x1>
			packet.data.velo=g_Vcur * 1000;
     ea4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <g_Vcur+0x2>
     ea8:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <g_Vcur+0x3>
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	4a e7       	ldi	r20, 0x7A	; 122
     eb2:	54 e4       	ldi	r21, 0x44	; 68
     eb4:	46 d2       	rcall	.+1164   	; 0x1342 <__mulsf3>
     eb6:	5e d1       	rcall	.+700    	; 0x1174 <__fixsfsi>
     eb8:	6d 87       	std	Y+13, r22	; 0x0d
     eba:	7e 87       	std	Y+14, r23	; 0x0e
     ebc:	8f 87       	std	Y+15, r24	; 0x0f
     ebe:	98 8b       	std	Y+16, r25	; 0x10
     ec0:	60 91 48 02 	lds	r22, 0x0248	; 0x800248 <g_Ccur>
     ec4:	70 91 49 02 	lds	r23, 0x0249	; 0x800249 <g_Ccur+0x1>
			packet.data.cur=g_Ccur * 1000;		
     ec8:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <g_Ccur+0x2>
     ecc:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <g_Ccur+0x3>
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	4a e7       	ldi	r20, 0x7A	; 122
     ed6:	54 e4       	ldi	r21, 0x44	; 68
     ed8:	34 d2       	rcall	.+1128   	; 0x1342 <__mulsf3>
     eda:	4c d1       	rcall	.+664    	; 0x1174 <__fixsfsi>
     edc:	69 8b       	std	Y+17, r22	; 0x11
     ede:	7a 8b       	std	Y+18, r23	; 0x12
     ee0:	8b 8b       	std	Y+19, r24	; 0x13
     ee2:	9c 8b       	std	Y+20, r25	; 0x14
     ee4:	fe 01       	movw	r30, r28
     ee6:	39 96       	adiw	r30, 0x09	; 9
     ee8:	81 91       	ld	r24, Z+
     eea:	98 85       	ldd	r25, Y+8	; 0x08
     eec:	89 0f       	add	r24, r25
     eee:	88 87       	std	Y+8, r24	; 0x08

			for(int i=8; i<sizeof(Packet_t); i++)
			packet.data.check += packet.buffer[i];
     ef0:	ee 15       	cp	r30, r14
     ef2:	ff 05       	cpc	r31, r15
     ef4:	c9 f7       	brne	.-14     	; 0xee8 <main+0x290>
     ef6:	8e 01       	movw	r16, r28

			packet.data.pos=g_Pcur * 1000;
			packet.data.velo=g_Vcur * 1000;
			packet.data.cur=g_Ccur * 1000;		

			for(int i=8; i<sizeof(Packet_t); i++)
     ef8:	0f 5f       	subi	r16, 0xFF	; 255
     efa:	1f 4f       	sbci	r17, 0xFF	; 255
     efc:	f8 01       	movw	r30, r16
     efe:	81 91       	ld	r24, Z+
     f00:	8f 01       	movw	r16, r30
     f02:	59 d0       	rcall	.+178    	; 0xfb6 <TransUart0>
			packet.data.check += packet.buffer[i];

			for(int i=0; i<packet.data.size; i++){
				TransUart0(packet.buffer[i]);
     f04:	0e 15       	cp	r16, r14
     f06:	1f 05       	cpc	r17, r15
     f08:	c9 f7       	brne	.-14     	; 0xefc <main+0x2a4>
     f0a:	9d cf       	rjmp	.-198    	; 0xe46 <main+0x1ee>

00000f0c <InitIO>:
     f0c:	8f ef       	ldi	r24, 0xFF	; 255
			packet.data.cur=g_Ccur * 1000;		

			for(int i=8; i<sizeof(Packet_t); i++)
			packet.data.check += packet.buffer[i];

			for(int i=0; i<packet.data.size; i++){
     f0e:	8a bb       	out	0x1a, r24	; 26
     f10:	84 bb       	out	0x14, r24	; 20
     f12:	88 e0       	ldi	r24, 0x08	; 8
     f14:	81 bb       	out	0x11, r24	; 17
	TransUart1( ((num%100000) / 10000) + 48);
	TransUart1( ((num%10000) / 1000) + 48);
	TransUart1( ((num%1000) / 100) + 48);
	TransUart1( ((num%100) / 10) + 48);
	TransUart1( num%10 + 48 );
}
     f16:	87 e6       	ldi	r24, 0x67	; 103
     f18:	87 bb       	out	0x17, r24	; 23
     f1a:	8a e1       	ldi	r24, 0x1A	; 26
     f1c:	82 b9       	out	0x02, r24	; 2
     f1e:	1b ba       	out	0x1b, r1	; 27
     f20:	87 e0       	ldi	r24, 0x07	; 7
     f22:	88 bb       	out	0x18, r24	; 24
     f24:	08 95       	ret

00000f26 <InitTimer0>:
     f26:	84 e0       	ldi	r24, 0x04	; 4
     f28:	83 bf       	out	0x33, r24	; 51
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	87 bf       	out	0x37, r24	; 55
     f2e:	08 95       	ret

00000f30 <InitTimer1>:
     f30:	82 ee       	ldi	r24, 0xE2	; 226
     f32:	8f bd       	out	0x2f, r24	; 47
     f34:	81 e1       	ldi	r24, 0x11	; 17
     f36:	8e bd       	out	0x2e, r24	; 46
     f38:	8f e8       	ldi	r24, 0x8F	; 143
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	97 bd       	out	0x27, r25	; 39
     f3e:	86 bd       	out	0x26, r24	; 38
     f40:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     f44:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     f48:	1b bc       	out	0x2b, r1	; 43
     f4a:	1a bc       	out	0x2a, r1	; 42
     f4c:	19 bc       	out	0x29, r1	; 41
     f4e:	18 bc       	out	0x28, r1	; 40
     f50:	1d bc       	out	0x2d, r1	; 45
     f52:	1c bc       	out	0x2c, r1	; 44
     f54:	08 95       	ret

00000f56 <InitTimer3>:
     f56:	82 eb       	ldi	r24, 0xB2	; 178
     f58:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     f5c:	81 e1       	ldi	r24, 0x11	; 17
     f5e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     f62:	8f e8       	ldi	r24, 0x8F	; 143
     f64:	91 e0       	ldi	r25, 0x01	; 1
     f66:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     f6a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f6e:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     f72:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     f76:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     f7a:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     f7e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     f82:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     f86:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     f8a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     f8e:	08 95       	ret

00000f90 <InitADC>:
     f90:	80 e4       	ldi	r24, 0x40	; 64
     f92:	87 b9       	out	0x07, r24	; 7
     f94:	86 e8       	ldi	r24, 0x86	; 134
     f96:	86 b9       	out	0x06, r24	; 6
     f98:	08 95       	ret

00000f9a <InitUart0>:
     f9a:	1b b8       	out	0x0b, r1	; 11
     f9c:	88 e9       	ldi	r24, 0x98	; 152
     f9e:	8a b9       	out	0x0a, r24	; 10
     fa0:	86 e0       	ldi	r24, 0x06	; 6
     fa2:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     fa6:	87 e6       	ldi	r24, 0x67	; 103
     fa8:	89 b9       	out	0x09, r24	; 9
     faa:	08 95       	ret

00000fac <InitSPI>:
     fac:	80 e5       	ldi	r24, 0x50	; 80
     fae:	8d b9       	out	0x0d, r24	; 13
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	8e b9       	out	0x0e, r24	; 14
     fb4:	08 95       	ret

00000fb6 <TransUart0>:
     fb6:	5d 9b       	sbis	0x0b, 5	; 11
     fb8:	fe cf       	rjmp	.-4      	; 0xfb6 <TransUart0>
     fba:	8c b9       	out	0x0c, r24	; 12
     fbc:	08 95       	ret

00000fbe <SPI_MasterSend>:
// Input : data
// Output : None
//////////////////////////////////////////////////////////////////
void SPI_MasterSend(unsigned char data){
	
	SPDR = data;
     fbe:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80));
     fc0:	77 9b       	sbis	0x0e, 7	; 14
     fc2:	fe cf       	rjmp	.-4      	; 0xfc0 <SPI_MasterSend+0x2>
	data = SPDR;
     fc4:	8f b1       	in	r24, 0x0f	; 15
     fc6:	08 95       	ret

00000fc8 <SPI_MasterRecv>:
// Input : None
// Output : data
//////////////////////////////////////////////////////////////////
unsigned char SPI_MasterRecv(void)
{
	SPDR = 0x00;
     fc8:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80));
     fca:	77 9b       	sbis	0x0e, 7	; 14
     fcc:	fe cf       	rjmp	.-4      	; 0xfca <SPI_MasterRecv+0x2>
	return SPDR;
     fce:	8f b1       	in	r24, 0x0f	; 15
     fd0:	08 95       	ret

00000fd2 <__subsf3>:
     fd2:	50 58       	subi	r21, 0x80	; 128

00000fd4 <__addsf3>:
     fd4:	bb 27       	eor	r27, r27
     fd6:	aa 27       	eor	r26, r26
     fd8:	0e d0       	rcall	.+28     	; 0xff6 <__addsf3x>
     fda:	75 c1       	rjmp	.+746    	; 0x12c6 <__fp_round>
     fdc:	66 d1       	rcall	.+716    	; 0x12aa <__fp_pscA>
     fde:	30 f0       	brcs	.+12     	; 0xfec <__addsf3+0x18>
     fe0:	6b d1       	rcall	.+726    	; 0x12b8 <__fp_pscB>
     fe2:	20 f0       	brcs	.+8      	; 0xfec <__addsf3+0x18>
     fe4:	31 f4       	brne	.+12     	; 0xff2 <__addsf3+0x1e>
     fe6:	9f 3f       	cpi	r25, 0xFF	; 255
     fe8:	11 f4       	brne	.+4      	; 0xfee <__addsf3+0x1a>
     fea:	1e f4       	brtc	.+6      	; 0xff2 <__addsf3+0x1e>
     fec:	5b c1       	rjmp	.+694    	; 0x12a4 <__fp_nan>
     fee:	0e f4       	brtc	.+2      	; 0xff2 <__addsf3+0x1e>
     ff0:	e0 95       	com	r30
     ff2:	e7 fb       	bst	r30, 7
     ff4:	51 c1       	rjmp	.+674    	; 0x1298 <__fp_inf>

00000ff6 <__addsf3x>:
     ff6:	e9 2f       	mov	r30, r25
     ff8:	77 d1       	rcall	.+750    	; 0x12e8 <__fp_split3>
     ffa:	80 f3       	brcs	.-32     	; 0xfdc <__addsf3+0x8>
     ffc:	ba 17       	cp	r27, r26
     ffe:	62 07       	cpc	r22, r18
    1000:	73 07       	cpc	r23, r19
    1002:	84 07       	cpc	r24, r20
    1004:	95 07       	cpc	r25, r21
    1006:	18 f0       	brcs	.+6      	; 0x100e <__addsf3x+0x18>
    1008:	71 f4       	brne	.+28     	; 0x1026 <__addsf3x+0x30>
    100a:	9e f5       	brtc	.+102    	; 0x1072 <__addsf3x+0x7c>
    100c:	8f c1       	rjmp	.+798    	; 0x132c <__fp_zero>
    100e:	0e f4       	brtc	.+2      	; 0x1012 <__addsf3x+0x1c>
    1010:	e0 95       	com	r30
    1012:	0b 2e       	mov	r0, r27
    1014:	ba 2f       	mov	r27, r26
    1016:	a0 2d       	mov	r26, r0
    1018:	0b 01       	movw	r0, r22
    101a:	b9 01       	movw	r22, r18
    101c:	90 01       	movw	r18, r0
    101e:	0c 01       	movw	r0, r24
    1020:	ca 01       	movw	r24, r20
    1022:	a0 01       	movw	r20, r0
    1024:	11 24       	eor	r1, r1
    1026:	ff 27       	eor	r31, r31
    1028:	59 1b       	sub	r21, r25
    102a:	99 f0       	breq	.+38     	; 0x1052 <__addsf3x+0x5c>
    102c:	59 3f       	cpi	r21, 0xF9	; 249
    102e:	50 f4       	brcc	.+20     	; 0x1044 <__addsf3x+0x4e>
    1030:	50 3e       	cpi	r21, 0xE0	; 224
    1032:	68 f1       	brcs	.+90     	; 0x108e <__addsf3x+0x98>
    1034:	1a 16       	cp	r1, r26
    1036:	f0 40       	sbci	r31, 0x00	; 0
    1038:	a2 2f       	mov	r26, r18
    103a:	23 2f       	mov	r18, r19
    103c:	34 2f       	mov	r19, r20
    103e:	44 27       	eor	r20, r20
    1040:	58 5f       	subi	r21, 0xF8	; 248
    1042:	f3 cf       	rjmp	.-26     	; 0x102a <__addsf3x+0x34>
    1044:	46 95       	lsr	r20
    1046:	37 95       	ror	r19
    1048:	27 95       	ror	r18
    104a:	a7 95       	ror	r26
    104c:	f0 40       	sbci	r31, 0x00	; 0
    104e:	53 95       	inc	r21
    1050:	c9 f7       	brne	.-14     	; 0x1044 <__addsf3x+0x4e>
    1052:	7e f4       	brtc	.+30     	; 0x1072 <__addsf3x+0x7c>
    1054:	1f 16       	cp	r1, r31
    1056:	ba 0b       	sbc	r27, r26
    1058:	62 0b       	sbc	r22, r18
    105a:	73 0b       	sbc	r23, r19
    105c:	84 0b       	sbc	r24, r20
    105e:	ba f0       	brmi	.+46     	; 0x108e <__addsf3x+0x98>
    1060:	91 50       	subi	r25, 0x01	; 1
    1062:	a1 f0       	breq	.+40     	; 0x108c <__addsf3x+0x96>
    1064:	ff 0f       	add	r31, r31
    1066:	bb 1f       	adc	r27, r27
    1068:	66 1f       	adc	r22, r22
    106a:	77 1f       	adc	r23, r23
    106c:	88 1f       	adc	r24, r24
    106e:	c2 f7       	brpl	.-16     	; 0x1060 <__addsf3x+0x6a>
    1070:	0e c0       	rjmp	.+28     	; 0x108e <__addsf3x+0x98>
    1072:	ba 0f       	add	r27, r26
    1074:	62 1f       	adc	r22, r18
    1076:	73 1f       	adc	r23, r19
    1078:	84 1f       	adc	r24, r20
    107a:	48 f4       	brcc	.+18     	; 0x108e <__addsf3x+0x98>
    107c:	87 95       	ror	r24
    107e:	77 95       	ror	r23
    1080:	67 95       	ror	r22
    1082:	b7 95       	ror	r27
    1084:	f7 95       	ror	r31
    1086:	9e 3f       	cpi	r25, 0xFE	; 254
    1088:	08 f0       	brcs	.+2      	; 0x108c <__addsf3x+0x96>
    108a:	b3 cf       	rjmp	.-154    	; 0xff2 <__addsf3+0x1e>
    108c:	93 95       	inc	r25
    108e:	88 0f       	add	r24, r24
    1090:	08 f0       	brcs	.+2      	; 0x1094 <__addsf3x+0x9e>
    1092:	99 27       	eor	r25, r25
    1094:	ee 0f       	add	r30, r30
    1096:	97 95       	ror	r25
    1098:	87 95       	ror	r24
    109a:	08 95       	ret

0000109c <__cmpsf2>:
    109c:	d9 d0       	rcall	.+434    	; 0x1250 <__fp_cmp>
    109e:	08 f4       	brcc	.+2      	; 0x10a2 <__cmpsf2+0x6>
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	08 95       	ret

000010a4 <__divsf3>:
    10a4:	0c d0       	rcall	.+24     	; 0x10be <__divsf3x>
    10a6:	0f c1       	rjmp	.+542    	; 0x12c6 <__fp_round>
    10a8:	07 d1       	rcall	.+526    	; 0x12b8 <__fp_pscB>
    10aa:	40 f0       	brcs	.+16     	; 0x10bc <__divsf3+0x18>
    10ac:	fe d0       	rcall	.+508    	; 0x12aa <__fp_pscA>
    10ae:	30 f0       	brcs	.+12     	; 0x10bc <__divsf3+0x18>
    10b0:	21 f4       	brne	.+8      	; 0x10ba <__divsf3+0x16>
    10b2:	5f 3f       	cpi	r21, 0xFF	; 255
    10b4:	19 f0       	breq	.+6      	; 0x10bc <__divsf3+0x18>
    10b6:	f0 c0       	rjmp	.+480    	; 0x1298 <__fp_inf>
    10b8:	51 11       	cpse	r21, r1
    10ba:	39 c1       	rjmp	.+626    	; 0x132e <__fp_szero>
    10bc:	f3 c0       	rjmp	.+486    	; 0x12a4 <__fp_nan>

000010be <__divsf3x>:
    10be:	14 d1       	rcall	.+552    	; 0x12e8 <__fp_split3>
    10c0:	98 f3       	brcs	.-26     	; 0x10a8 <__divsf3+0x4>

000010c2 <__divsf3_pse>:
    10c2:	99 23       	and	r25, r25
    10c4:	c9 f3       	breq	.-14     	; 0x10b8 <__divsf3+0x14>
    10c6:	55 23       	and	r21, r21
    10c8:	b1 f3       	breq	.-20     	; 0x10b6 <__divsf3+0x12>
    10ca:	95 1b       	sub	r25, r21
    10cc:	55 0b       	sbc	r21, r21
    10ce:	bb 27       	eor	r27, r27
    10d0:	aa 27       	eor	r26, r26
    10d2:	62 17       	cp	r22, r18
    10d4:	73 07       	cpc	r23, r19
    10d6:	84 07       	cpc	r24, r20
    10d8:	38 f0       	brcs	.+14     	; 0x10e8 <__divsf3_pse+0x26>
    10da:	9f 5f       	subi	r25, 0xFF	; 255
    10dc:	5f 4f       	sbci	r21, 0xFF	; 255
    10de:	22 0f       	add	r18, r18
    10e0:	33 1f       	adc	r19, r19
    10e2:	44 1f       	adc	r20, r20
    10e4:	aa 1f       	adc	r26, r26
    10e6:	a9 f3       	breq	.-22     	; 0x10d2 <__divsf3_pse+0x10>
    10e8:	33 d0       	rcall	.+102    	; 0x1150 <__stack+0x51>
    10ea:	0e 2e       	mov	r0, r30
    10ec:	3a f0       	brmi	.+14     	; 0x10fc <__divsf3_pse+0x3a>
    10ee:	e0 e8       	ldi	r30, 0x80	; 128
    10f0:	30 d0       	rcall	.+96     	; 0x1152 <__stack+0x53>
    10f2:	91 50       	subi	r25, 0x01	; 1
    10f4:	50 40       	sbci	r21, 0x00	; 0
    10f6:	e6 95       	lsr	r30
    10f8:	00 1c       	adc	r0, r0
    10fa:	ca f7       	brpl	.-14     	; 0x10ee <__divsf3_pse+0x2c>
    10fc:	29 d0       	rcall	.+82     	; 0x1150 <__stack+0x51>
    10fe:	fe 2f       	mov	r31, r30
    1100:	27 d0       	rcall	.+78     	; 0x1150 <__stack+0x51>
    1102:	66 0f       	add	r22, r22
    1104:	77 1f       	adc	r23, r23
    1106:	88 1f       	adc	r24, r24
    1108:	bb 1f       	adc	r27, r27
    110a:	26 17       	cp	r18, r22
    110c:	37 07       	cpc	r19, r23
    110e:	48 07       	cpc	r20, r24
    1110:	ab 07       	cpc	r26, r27
    1112:	b0 e8       	ldi	r27, 0x80	; 128
    1114:	09 f0       	breq	.+2      	; 0x1118 <__stack+0x19>
    1116:	bb 0b       	sbc	r27, r27
    1118:	80 2d       	mov	r24, r0
    111a:	bf 01       	movw	r22, r30
    111c:	ff 27       	eor	r31, r31
    111e:	93 58       	subi	r25, 0x83	; 131
    1120:	5f 4f       	sbci	r21, 0xFF	; 255
    1122:	2a f0       	brmi	.+10     	; 0x112e <__stack+0x2f>
    1124:	9e 3f       	cpi	r25, 0xFE	; 254
    1126:	51 05       	cpc	r21, r1
    1128:	68 f0       	brcs	.+26     	; 0x1144 <__stack+0x45>
    112a:	b6 c0       	rjmp	.+364    	; 0x1298 <__fp_inf>
    112c:	00 c1       	rjmp	.+512    	; 0x132e <__fp_szero>
    112e:	5f 3f       	cpi	r21, 0xFF	; 255
    1130:	ec f3       	brlt	.-6      	; 0x112c <__stack+0x2d>
    1132:	98 3e       	cpi	r25, 0xE8	; 232
    1134:	dc f3       	brlt	.-10     	; 0x112c <__stack+0x2d>
    1136:	86 95       	lsr	r24
    1138:	77 95       	ror	r23
    113a:	67 95       	ror	r22
    113c:	b7 95       	ror	r27
    113e:	f7 95       	ror	r31
    1140:	9f 5f       	subi	r25, 0xFF	; 255
    1142:	c9 f7       	brne	.-14     	; 0x1136 <__stack+0x37>
    1144:	88 0f       	add	r24, r24
    1146:	91 1d       	adc	r25, r1
    1148:	96 95       	lsr	r25
    114a:	87 95       	ror	r24
    114c:	97 f9       	bld	r25, 7
    114e:	08 95       	ret
    1150:	e1 e0       	ldi	r30, 0x01	; 1
    1152:	66 0f       	add	r22, r22
    1154:	77 1f       	adc	r23, r23
    1156:	88 1f       	adc	r24, r24
    1158:	bb 1f       	adc	r27, r27
    115a:	62 17       	cp	r22, r18
    115c:	73 07       	cpc	r23, r19
    115e:	84 07       	cpc	r24, r20
    1160:	ba 07       	cpc	r27, r26
    1162:	20 f0       	brcs	.+8      	; 0x116c <__stack+0x6d>
    1164:	62 1b       	sub	r22, r18
    1166:	73 0b       	sbc	r23, r19
    1168:	84 0b       	sbc	r24, r20
    116a:	ba 0b       	sbc	r27, r26
    116c:	ee 1f       	adc	r30, r30
    116e:	88 f7       	brcc	.-30     	; 0x1152 <__stack+0x53>
    1170:	e0 95       	com	r30
    1172:	08 95       	ret

00001174 <__fixsfsi>:
    1174:	04 d0       	rcall	.+8      	; 0x117e <__fixunssfsi>
    1176:	68 94       	set
    1178:	b1 11       	cpse	r27, r1
    117a:	d9 c0       	rjmp	.+434    	; 0x132e <__fp_szero>
    117c:	08 95       	ret

0000117e <__fixunssfsi>:
    117e:	bc d0       	rcall	.+376    	; 0x12f8 <__fp_splitA>
    1180:	88 f0       	brcs	.+34     	; 0x11a4 <__fixunssfsi+0x26>
    1182:	9f 57       	subi	r25, 0x7F	; 127
    1184:	90 f0       	brcs	.+36     	; 0x11aa <__fixunssfsi+0x2c>
    1186:	b9 2f       	mov	r27, r25
    1188:	99 27       	eor	r25, r25
    118a:	b7 51       	subi	r27, 0x17	; 23
    118c:	a0 f0       	brcs	.+40     	; 0x11b6 <__fixunssfsi+0x38>
    118e:	d1 f0       	breq	.+52     	; 0x11c4 <__fixunssfsi+0x46>
    1190:	66 0f       	add	r22, r22
    1192:	77 1f       	adc	r23, r23
    1194:	88 1f       	adc	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	1a f0       	brmi	.+6      	; 0x11a0 <__fixunssfsi+0x22>
    119a:	ba 95       	dec	r27
    119c:	c9 f7       	brne	.-14     	; 0x1190 <__fixunssfsi+0x12>
    119e:	12 c0       	rjmp	.+36     	; 0x11c4 <__fixunssfsi+0x46>
    11a0:	b1 30       	cpi	r27, 0x01	; 1
    11a2:	81 f0       	breq	.+32     	; 0x11c4 <__fixunssfsi+0x46>
    11a4:	c3 d0       	rcall	.+390    	; 0x132c <__fp_zero>
    11a6:	b1 e0       	ldi	r27, 0x01	; 1
    11a8:	08 95       	ret
    11aa:	c0 c0       	rjmp	.+384    	; 0x132c <__fp_zero>
    11ac:	67 2f       	mov	r22, r23
    11ae:	78 2f       	mov	r23, r24
    11b0:	88 27       	eor	r24, r24
    11b2:	b8 5f       	subi	r27, 0xF8	; 248
    11b4:	39 f0       	breq	.+14     	; 0x11c4 <__fixunssfsi+0x46>
    11b6:	b9 3f       	cpi	r27, 0xF9	; 249
    11b8:	cc f3       	brlt	.-14     	; 0x11ac <__fixunssfsi+0x2e>
    11ba:	86 95       	lsr	r24
    11bc:	77 95       	ror	r23
    11be:	67 95       	ror	r22
    11c0:	b3 95       	inc	r27
    11c2:	d9 f7       	brne	.-10     	; 0x11ba <__fixunssfsi+0x3c>
    11c4:	3e f4       	brtc	.+14     	; 0x11d4 <__fixunssfsi+0x56>
    11c6:	90 95       	com	r25
    11c8:	80 95       	com	r24
    11ca:	70 95       	com	r23
    11cc:	61 95       	neg	r22
    11ce:	7f 4f       	sbci	r23, 0xFF	; 255
    11d0:	8f 4f       	sbci	r24, 0xFF	; 255
    11d2:	9f 4f       	sbci	r25, 0xFF	; 255
    11d4:	08 95       	ret

000011d6 <__floatunsisf>:
    11d6:	e8 94       	clt
    11d8:	09 c0       	rjmp	.+18     	; 0x11ec <__floatsisf+0x12>

000011da <__floatsisf>:
    11da:	97 fb       	bst	r25, 7
    11dc:	3e f4       	brtc	.+14     	; 0x11ec <__floatsisf+0x12>
    11de:	90 95       	com	r25
    11e0:	80 95       	com	r24
    11e2:	70 95       	com	r23
    11e4:	61 95       	neg	r22
    11e6:	7f 4f       	sbci	r23, 0xFF	; 255
    11e8:	8f 4f       	sbci	r24, 0xFF	; 255
    11ea:	9f 4f       	sbci	r25, 0xFF	; 255
    11ec:	99 23       	and	r25, r25
    11ee:	a9 f0       	breq	.+42     	; 0x121a <__floatsisf+0x40>
    11f0:	f9 2f       	mov	r31, r25
    11f2:	96 e9       	ldi	r25, 0x96	; 150
    11f4:	bb 27       	eor	r27, r27
    11f6:	93 95       	inc	r25
    11f8:	f6 95       	lsr	r31
    11fa:	87 95       	ror	r24
    11fc:	77 95       	ror	r23
    11fe:	67 95       	ror	r22
    1200:	b7 95       	ror	r27
    1202:	f1 11       	cpse	r31, r1
    1204:	f8 cf       	rjmp	.-16     	; 0x11f6 <__floatsisf+0x1c>
    1206:	fa f4       	brpl	.+62     	; 0x1246 <__floatsisf+0x6c>
    1208:	bb 0f       	add	r27, r27
    120a:	11 f4       	brne	.+4      	; 0x1210 <__floatsisf+0x36>
    120c:	60 ff       	sbrs	r22, 0
    120e:	1b c0       	rjmp	.+54     	; 0x1246 <__floatsisf+0x6c>
    1210:	6f 5f       	subi	r22, 0xFF	; 255
    1212:	7f 4f       	sbci	r23, 0xFF	; 255
    1214:	8f 4f       	sbci	r24, 0xFF	; 255
    1216:	9f 4f       	sbci	r25, 0xFF	; 255
    1218:	16 c0       	rjmp	.+44     	; 0x1246 <__floatsisf+0x6c>
    121a:	88 23       	and	r24, r24
    121c:	11 f0       	breq	.+4      	; 0x1222 <__floatsisf+0x48>
    121e:	96 e9       	ldi	r25, 0x96	; 150
    1220:	11 c0       	rjmp	.+34     	; 0x1244 <__floatsisf+0x6a>
    1222:	77 23       	and	r23, r23
    1224:	21 f0       	breq	.+8      	; 0x122e <__floatsisf+0x54>
    1226:	9e e8       	ldi	r25, 0x8E	; 142
    1228:	87 2f       	mov	r24, r23
    122a:	76 2f       	mov	r23, r22
    122c:	05 c0       	rjmp	.+10     	; 0x1238 <__floatsisf+0x5e>
    122e:	66 23       	and	r22, r22
    1230:	71 f0       	breq	.+28     	; 0x124e <__floatsisf+0x74>
    1232:	96 e8       	ldi	r25, 0x86	; 134
    1234:	86 2f       	mov	r24, r22
    1236:	70 e0       	ldi	r23, 0x00	; 0
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	2a f0       	brmi	.+10     	; 0x1246 <__floatsisf+0x6c>
    123c:	9a 95       	dec	r25
    123e:	66 0f       	add	r22, r22
    1240:	77 1f       	adc	r23, r23
    1242:	88 1f       	adc	r24, r24
    1244:	da f7       	brpl	.-10     	; 0x123c <__floatsisf+0x62>
    1246:	88 0f       	add	r24, r24
    1248:	96 95       	lsr	r25
    124a:	87 95       	ror	r24
    124c:	97 f9       	bld	r25, 7
    124e:	08 95       	ret

00001250 <__fp_cmp>:
    1250:	99 0f       	add	r25, r25
    1252:	00 08       	sbc	r0, r0
    1254:	55 0f       	add	r21, r21
    1256:	aa 0b       	sbc	r26, r26
    1258:	e0 e8       	ldi	r30, 0x80	; 128
    125a:	fe ef       	ldi	r31, 0xFE	; 254
    125c:	16 16       	cp	r1, r22
    125e:	17 06       	cpc	r1, r23
    1260:	e8 07       	cpc	r30, r24
    1262:	f9 07       	cpc	r31, r25
    1264:	c0 f0       	brcs	.+48     	; 0x1296 <__fp_cmp+0x46>
    1266:	12 16       	cp	r1, r18
    1268:	13 06       	cpc	r1, r19
    126a:	e4 07       	cpc	r30, r20
    126c:	f5 07       	cpc	r31, r21
    126e:	98 f0       	brcs	.+38     	; 0x1296 <__fp_cmp+0x46>
    1270:	62 1b       	sub	r22, r18
    1272:	73 0b       	sbc	r23, r19
    1274:	84 0b       	sbc	r24, r20
    1276:	95 0b       	sbc	r25, r21
    1278:	39 f4       	brne	.+14     	; 0x1288 <__fp_cmp+0x38>
    127a:	0a 26       	eor	r0, r26
    127c:	61 f0       	breq	.+24     	; 0x1296 <__fp_cmp+0x46>
    127e:	23 2b       	or	r18, r19
    1280:	24 2b       	or	r18, r20
    1282:	25 2b       	or	r18, r21
    1284:	21 f4       	brne	.+8      	; 0x128e <__fp_cmp+0x3e>
    1286:	08 95       	ret
    1288:	0a 26       	eor	r0, r26
    128a:	09 f4       	brne	.+2      	; 0x128e <__fp_cmp+0x3e>
    128c:	a1 40       	sbci	r26, 0x01	; 1
    128e:	a6 95       	lsr	r26
    1290:	8f ef       	ldi	r24, 0xFF	; 255
    1292:	81 1d       	adc	r24, r1
    1294:	81 1d       	adc	r24, r1
    1296:	08 95       	ret

00001298 <__fp_inf>:
    1298:	97 f9       	bld	r25, 7
    129a:	9f 67       	ori	r25, 0x7F	; 127
    129c:	80 e8       	ldi	r24, 0x80	; 128
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	08 95       	ret

000012a4 <__fp_nan>:
    12a4:	9f ef       	ldi	r25, 0xFF	; 255
    12a6:	80 ec       	ldi	r24, 0xC0	; 192
    12a8:	08 95       	ret

000012aa <__fp_pscA>:
    12aa:	00 24       	eor	r0, r0
    12ac:	0a 94       	dec	r0
    12ae:	16 16       	cp	r1, r22
    12b0:	17 06       	cpc	r1, r23
    12b2:	18 06       	cpc	r1, r24
    12b4:	09 06       	cpc	r0, r25
    12b6:	08 95       	ret

000012b8 <__fp_pscB>:
    12b8:	00 24       	eor	r0, r0
    12ba:	0a 94       	dec	r0
    12bc:	12 16       	cp	r1, r18
    12be:	13 06       	cpc	r1, r19
    12c0:	14 06       	cpc	r1, r20
    12c2:	05 06       	cpc	r0, r21
    12c4:	08 95       	ret

000012c6 <__fp_round>:
    12c6:	09 2e       	mov	r0, r25
    12c8:	03 94       	inc	r0
    12ca:	00 0c       	add	r0, r0
    12cc:	11 f4       	brne	.+4      	; 0x12d2 <__fp_round+0xc>
    12ce:	88 23       	and	r24, r24
    12d0:	52 f0       	brmi	.+20     	; 0x12e6 <__fp_round+0x20>
    12d2:	bb 0f       	add	r27, r27
    12d4:	40 f4       	brcc	.+16     	; 0x12e6 <__fp_round+0x20>
    12d6:	bf 2b       	or	r27, r31
    12d8:	11 f4       	brne	.+4      	; 0x12de <__fp_round+0x18>
    12da:	60 ff       	sbrs	r22, 0
    12dc:	04 c0       	rjmp	.+8      	; 0x12e6 <__fp_round+0x20>
    12de:	6f 5f       	subi	r22, 0xFF	; 255
    12e0:	7f 4f       	sbci	r23, 0xFF	; 255
    12e2:	8f 4f       	sbci	r24, 0xFF	; 255
    12e4:	9f 4f       	sbci	r25, 0xFF	; 255
    12e6:	08 95       	ret

000012e8 <__fp_split3>:
    12e8:	57 fd       	sbrc	r21, 7
    12ea:	90 58       	subi	r25, 0x80	; 128
    12ec:	44 0f       	add	r20, r20
    12ee:	55 1f       	adc	r21, r21
    12f0:	59 f0       	breq	.+22     	; 0x1308 <__fp_splitA+0x10>
    12f2:	5f 3f       	cpi	r21, 0xFF	; 255
    12f4:	71 f0       	breq	.+28     	; 0x1312 <__fp_splitA+0x1a>
    12f6:	47 95       	ror	r20

000012f8 <__fp_splitA>:
    12f8:	88 0f       	add	r24, r24
    12fa:	97 fb       	bst	r25, 7
    12fc:	99 1f       	adc	r25, r25
    12fe:	61 f0       	breq	.+24     	; 0x1318 <__fp_splitA+0x20>
    1300:	9f 3f       	cpi	r25, 0xFF	; 255
    1302:	79 f0       	breq	.+30     	; 0x1322 <__fp_splitA+0x2a>
    1304:	87 95       	ror	r24
    1306:	08 95       	ret
    1308:	12 16       	cp	r1, r18
    130a:	13 06       	cpc	r1, r19
    130c:	14 06       	cpc	r1, r20
    130e:	55 1f       	adc	r21, r21
    1310:	f2 cf       	rjmp	.-28     	; 0x12f6 <__fp_split3+0xe>
    1312:	46 95       	lsr	r20
    1314:	f1 df       	rcall	.-30     	; 0x12f8 <__fp_splitA>
    1316:	08 c0       	rjmp	.+16     	; 0x1328 <__fp_splitA+0x30>
    1318:	16 16       	cp	r1, r22
    131a:	17 06       	cpc	r1, r23
    131c:	18 06       	cpc	r1, r24
    131e:	99 1f       	adc	r25, r25
    1320:	f1 cf       	rjmp	.-30     	; 0x1304 <__fp_splitA+0xc>
    1322:	86 95       	lsr	r24
    1324:	71 05       	cpc	r23, r1
    1326:	61 05       	cpc	r22, r1
    1328:	08 94       	sec
    132a:	08 95       	ret

0000132c <__fp_zero>:
    132c:	e8 94       	clt

0000132e <__fp_szero>:
    132e:	bb 27       	eor	r27, r27
    1330:	66 27       	eor	r22, r22
    1332:	77 27       	eor	r23, r23
    1334:	cb 01       	movw	r24, r22
    1336:	97 f9       	bld	r25, 7
    1338:	08 95       	ret

0000133a <__gesf2>:
    133a:	8a df       	rcall	.-236    	; 0x1250 <__fp_cmp>
    133c:	08 f4       	brcc	.+2      	; 0x1340 <__gesf2+0x6>
    133e:	8f ef       	ldi	r24, 0xFF	; 255
    1340:	08 95       	ret

00001342 <__mulsf3>:
    1342:	0b d0       	rcall	.+22     	; 0x135a <__mulsf3x>
    1344:	c0 cf       	rjmp	.-128    	; 0x12c6 <__fp_round>
    1346:	b1 df       	rcall	.-158    	; 0x12aa <__fp_pscA>
    1348:	28 f0       	brcs	.+10     	; 0x1354 <__mulsf3+0x12>
    134a:	b6 df       	rcall	.-148    	; 0x12b8 <__fp_pscB>
    134c:	18 f0       	brcs	.+6      	; 0x1354 <__mulsf3+0x12>
    134e:	95 23       	and	r25, r21
    1350:	09 f0       	breq	.+2      	; 0x1354 <__mulsf3+0x12>
    1352:	a2 cf       	rjmp	.-188    	; 0x1298 <__fp_inf>
    1354:	a7 cf       	rjmp	.-178    	; 0x12a4 <__fp_nan>
    1356:	11 24       	eor	r1, r1
    1358:	ea cf       	rjmp	.-44     	; 0x132e <__fp_szero>

0000135a <__mulsf3x>:
    135a:	c6 df       	rcall	.-116    	; 0x12e8 <__fp_split3>
    135c:	a0 f3       	brcs	.-24     	; 0x1346 <__mulsf3+0x4>

0000135e <__mulsf3_pse>:
    135e:	95 9f       	mul	r25, r21
    1360:	d1 f3       	breq	.-12     	; 0x1356 <__mulsf3+0x14>
    1362:	95 0f       	add	r25, r21
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	55 1f       	adc	r21, r21
    1368:	62 9f       	mul	r22, r18
    136a:	f0 01       	movw	r30, r0
    136c:	72 9f       	mul	r23, r18
    136e:	bb 27       	eor	r27, r27
    1370:	f0 0d       	add	r31, r0
    1372:	b1 1d       	adc	r27, r1
    1374:	63 9f       	mul	r22, r19
    1376:	aa 27       	eor	r26, r26
    1378:	f0 0d       	add	r31, r0
    137a:	b1 1d       	adc	r27, r1
    137c:	aa 1f       	adc	r26, r26
    137e:	64 9f       	mul	r22, r20
    1380:	66 27       	eor	r22, r22
    1382:	b0 0d       	add	r27, r0
    1384:	a1 1d       	adc	r26, r1
    1386:	66 1f       	adc	r22, r22
    1388:	82 9f       	mul	r24, r18
    138a:	22 27       	eor	r18, r18
    138c:	b0 0d       	add	r27, r0
    138e:	a1 1d       	adc	r26, r1
    1390:	62 1f       	adc	r22, r18
    1392:	73 9f       	mul	r23, r19
    1394:	b0 0d       	add	r27, r0
    1396:	a1 1d       	adc	r26, r1
    1398:	62 1f       	adc	r22, r18
    139a:	83 9f       	mul	r24, r19
    139c:	a0 0d       	add	r26, r0
    139e:	61 1d       	adc	r22, r1
    13a0:	22 1f       	adc	r18, r18
    13a2:	74 9f       	mul	r23, r20
    13a4:	33 27       	eor	r19, r19
    13a6:	a0 0d       	add	r26, r0
    13a8:	61 1d       	adc	r22, r1
    13aa:	23 1f       	adc	r18, r19
    13ac:	84 9f       	mul	r24, r20
    13ae:	60 0d       	add	r22, r0
    13b0:	21 1d       	adc	r18, r1
    13b2:	82 2f       	mov	r24, r18
    13b4:	76 2f       	mov	r23, r22
    13b6:	6a 2f       	mov	r22, r26
    13b8:	11 24       	eor	r1, r1
    13ba:	9f 57       	subi	r25, 0x7F	; 127
    13bc:	50 40       	sbci	r21, 0x00	; 0
    13be:	8a f0       	brmi	.+34     	; 0x13e2 <__mulsf3_pse+0x84>
    13c0:	e1 f0       	breq	.+56     	; 0x13fa <__mulsf3_pse+0x9c>
    13c2:	88 23       	and	r24, r24
    13c4:	4a f0       	brmi	.+18     	; 0x13d8 <__mulsf3_pse+0x7a>
    13c6:	ee 0f       	add	r30, r30
    13c8:	ff 1f       	adc	r31, r31
    13ca:	bb 1f       	adc	r27, r27
    13cc:	66 1f       	adc	r22, r22
    13ce:	77 1f       	adc	r23, r23
    13d0:	88 1f       	adc	r24, r24
    13d2:	91 50       	subi	r25, 0x01	; 1
    13d4:	50 40       	sbci	r21, 0x00	; 0
    13d6:	a9 f7       	brne	.-22     	; 0x13c2 <__mulsf3_pse+0x64>
    13d8:	9e 3f       	cpi	r25, 0xFE	; 254
    13da:	51 05       	cpc	r21, r1
    13dc:	70 f0       	brcs	.+28     	; 0x13fa <__mulsf3_pse+0x9c>
    13de:	5c cf       	rjmp	.-328    	; 0x1298 <__fp_inf>
    13e0:	a6 cf       	rjmp	.-180    	; 0x132e <__fp_szero>
    13e2:	5f 3f       	cpi	r21, 0xFF	; 255
    13e4:	ec f3       	brlt	.-6      	; 0x13e0 <__mulsf3_pse+0x82>
    13e6:	98 3e       	cpi	r25, 0xE8	; 232
    13e8:	dc f3       	brlt	.-10     	; 0x13e0 <__mulsf3_pse+0x82>
    13ea:	86 95       	lsr	r24
    13ec:	77 95       	ror	r23
    13ee:	67 95       	ror	r22
    13f0:	b7 95       	ror	r27
    13f2:	f7 95       	ror	r31
    13f4:	e7 95       	ror	r30
    13f6:	9f 5f       	subi	r25, 0xFF	; 255
    13f8:	c1 f7       	brne	.-16     	; 0x13ea <__mulsf3_pse+0x8c>
    13fa:	fe 2b       	or	r31, r30
    13fc:	88 0f       	add	r24, r24
    13fe:	91 1d       	adc	r25, r1
    1400:	96 95       	lsr	r25
    1402:	87 95       	ror	r24
    1404:	97 f9       	bld	r25, 7
    1406:	08 95       	ret

00001408 <_exit>:
    1408:	f8 94       	cli

0000140a <__stop_program>:
    140a:	ff cf       	rjmp	.-2      	; 0x140a <__stop_program>
